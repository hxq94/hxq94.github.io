<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小z‘s life</title>
  
  
  <link href="https://hxq94.github.io/atom.xml" rel="self"/>
  
  <link href="https://hxq94.github.io/"/>
  <updated>2023-06-17T08:42:35.330Z</updated>
  <id>https://hxq94.github.io/</id>
  
  <author>
    <name>libei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>netty</title>
    <link href="https://hxq94.github.io/2023/06/13/netty/"/>
    <id>https://hxq94.github.io/2023/06/13/netty/</id>
    <published>2023-06-13T14:22:35.022Z</published>
    <updated>2023-06-17T08:42:35.330Z</updated>
    
    <content type="html"><![CDATA[<p>nio 虽然使用了多路复用，但是真正实现一个网络编程还需要考虑很多问题，所以出现了netty这种基于nio的网络编程框架，来帮助我们简化开发网络相关问题的难度，netty使用异步的方式来接收各种事件，并提供链式pipeline的方式帮助我们处理数据，并且增强了nio的ByteBuffer，还提供了一系列例如心跳、异步等方式来帮助我们构建代码</p><span id="more"></span><h3 id="netty架构"><a href="#netty架构" class="headerlink" title="netty架构"></a>netty架构</h3><p>从网上找了两张图，netty的总体架构，以及netty的线程模型如下</p><p><img src="/img/nio/0041.png"></p><p>这张图表明了netty可以有多个eventloopGroup 每个eventLoopGroup中包含多个eventLoop，可以帮助我们异步执行一些io事件，并且还表明netty中有多条流水线，其中每个流水线pipline都必然有一个head和tail的双向链表来对应入站和出站，一般来说，出战需要编码，入站需要解码，如果pipeline上的事件需要处理很久，那么可以交给链上的下一个处理器处理，也可以放入任务队列执行，这样变相提高了处理速度<br><img src="/img/nio/nio_eventloop.png"></p><p>通过eventLoop可以拿到channel，进而处理我们的io事件</p><h3 id="上一个栗子"><a href="#上一个栗子" class="headerlink" title="上一个栗子"></a>上一个栗子</h3><h4 id="最简单的netty服务器"><a href="#最简单的netty服务器" class="headerlink" title="最简单的netty服务器"></a>最简单的netty服务器</h4><p>一个简单的netty的网络编程🌰</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;nio 虽然使用了多路复用，但是真正实现一个网络编程还需要考虑很多问题，所以出现了netty这种基于nio的网络编程框架，来帮助我们简化开发网络相关问题的难度，netty使用异步的方式来接收各种事件，并提供链式pipeline的方式帮助我们处理数据，并且增强了nio的ByteBuffer，还提供了一系列例如心跳、异步等方式来帮助我们构建代码&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://hxq94.github.io/categories/java/"/>
    
    <category term="网络编程" scheme="https://hxq94.github.io/categories/java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="网络编程" scheme="https://hxq94.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>NIO</title>
    <link href="https://hxq94.github.io/2023/05/08/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://hxq94.github.io/2023/05/08/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2023-05-08T12:27:38.788Z</published>
    <updated>2023-06-13T14:22:32.466Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇说过了基础IO流的操作，这篇简单说一下网络编程，网络编程就我自己理解就是在网络世界中进行数据的互相传递，它基于OSI七层模型，进行层层封装，来将数据最终封装成了一个个数据包，然后发往另外一端，这篇暂时不说TCP、UDP以及socket通信的其它协议，这篇只说一下跟IO相关的网络编程</p><span id="more"></span><h3 id="直接上栗子"><a href="#直接上栗子" class="headerlink" title="直接上栗子"></a>直接上栗子</h3><h4 id="最简单的IO"><a href="#最简单的IO" class="headerlink" title="最简单的IO"></a>最简单的IO</h4><p>一个简单的基于IO的网络编程🌰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Server</span></span><br><span class="line"><span class="keyword">package</span> com.hyf.demo.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>();</span><br><span class="line">            <span class="type">SocketAddress</span> <span class="variable">socketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line">            serverSocket.bind(socketAddress);</span><br><span class="line">            System.out.println(<span class="string">&quot;等待客户端连接&quot;</span>);</span><br><span class="line">            <span class="comment">// 1.这里会等待客户端连接阻塞</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端连接成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取socket输入流中的数据</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">            String msg;</span><br><span class="line">            <span class="comment">// 2. 这里会阻塞等待客户端消息</span></span><br><span class="line">            <span class="keyword">while</span> ((msg = inputStream.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Client</span></span><br><span class="line"><span class="keyword">package</span> com.hyf.demo.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建socket</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>();</span><br><span class="line">        <span class="type">SocketAddress</span> <span class="variable">socketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket.connect(socketAddress);</span><br><span class="line">            System.out.println(<span class="string">&quot;连接服务端成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"></span><br><span class="line">            String msg;</span><br><span class="line">            <span class="comment">// 这里会等待控制台输入 阻塞</span></span><br><span class="line">            <span class="keyword">while</span> ((msg = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                <span class="comment">// 使用了readline 需要加入\n \r等 不然不算一行</span></span><br><span class="line">                outputStream.write((msg+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>上面的代码运行起来后，可以在控制台进行基本的简单的客户端和服务端的通讯，但是上面的代码有几个问题</p><ol><li>只能接受一个客户端连接</li><li>服务端等待客户端连接只能阻塞等待</li></ol><h3 id="解决只能接受一个客户端连接"><a href="#解决只能接受一个客户端连接" class="headerlink" title="解决只能接受一个客户端连接"></a>解决只能接受一个客户端连接</h3><blockquote><p>解决只能接受一个客户端连接</p></blockquote><p>直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">Server</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hyf.demo.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储socket的list 这里涉及到多线程编程 所以可以使用带锁的list 但是这里demo的话 自己使用synchronized代码去写</span></span><br><span class="line">        <span class="comment">// 这里可以使用CopyOnWriteArrayList 但是CopyOnWriteArrayList 迭代删除的时候会有问题</span></span><br><span class="line">        <span class="comment">// 所以可以使用Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span><br><span class="line">        List&lt;Socket&gt; socketList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">60L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">5</span>), <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>();</span><br><span class="line">            <span class="type">SocketAddress</span> <span class="variable">socketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line">            serverSocket.bind(socketAddress);</span><br><span class="line">            System.out.println(<span class="string">&quot;等待客户端连接&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启一个线程专门处理客户端连接</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                        socketList.add(socket);</span><br><span class="line">                        System.out.println(<span class="string">&quot;新加入一个客户端，端口 &quot;</span> + socket.getPort());</span><br><span class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1.这里会等待客户端连接阻塞</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (Server.class) &#123;</span><br><span class="line">                    <span class="comment">// 遍历socketList</span></span><br><span class="line">                    Iterator&lt;Socket&gt; iterator = socketList.iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                        <span class="comment">// 读取socket输入流中的数据</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 2. 这里会阻塞等待客户端消息</span></span><br><span class="line">                        threadPoolExecutor.execute(() -&gt; &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="type">BufferedReader</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">                                String msg;</span><br><span class="line">                                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (((msg = inputStream.readLine()) != <span class="literal">null</span>)) &#123;</span><br><span class="line">                                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 端口 &quot;</span> + socket.getPort() + <span class="string">&quot; &quot;</span> + msg);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Client</span></span><br><span class="line"><span class="keyword">package</span> com.hyf.demo.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建socket</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>();</span><br><span class="line">        <span class="type">SocketAddress</span> <span class="variable">socketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket.connect(socketAddress);</span><br><span class="line">            System.out.println(<span class="string">&quot;连接服务端成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"></span><br><span class="line">            String msg;</span><br><span class="line">            <span class="comment">// 这里会等待控制台输入 阻塞</span></span><br><span class="line">            <span class="keyword">while</span> ((msg = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                <span class="comment">// 使用了readline 需要加入\n \r等 不然不算一行</span></span><br><span class="line">                outputStream.write((msg+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server输出如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">等待客户端连接</span><br><span class="line">新加入一个客户端，端口 54968</span><br><span class="line">新加入一个客户端，端口 54972</span><br><span class="line">Thread-1 端口 54968 我是客户端1</span><br><span class="line">Thread-2 端口 54972 我是客户端2</span><br></pre></td></tr></table></figure><p>client输出如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">连接服务端成功</span><br><span class="line">我是客户端1</span><br></pre></td></tr></table></figure><h4 id="解决第二个问题"><a href="#解决第二个问题" class="headerlink" title="解决第二个问题"></a>解决第二个问题</h4><blockquote><p>服务端只能阻塞等待</p></blockquote><p>这个问题因为我们使用的是BIO，所以只能阻塞等待，靠开多个线程去进行异步处理，但是这样也只能应对连接数比较少的情景，如果连接数一旦上来，那么一直开线程也是一笔很大的开销，所以才有了NIO这样的的非阻塞IO来解决这个问题</p><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><p>NIO和 IO的区别 阻塞的 IO 会阻塞在 IO 操作上, NIO 阻塞在事件获取上</p><p>NIO解决的问题</p><ol><li>工作在非阻塞线程上，线程利用率提高</li><li>适合连接数特别多的场景，但是流量较少</li></ol><h3 id="常用代码介绍"><a href="#常用代码介绍" class="headerlink" title="常用代码介绍"></a>常用代码介绍</h3><p>常用的一个bytebuffer代码简单介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> file.getChannel();</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// 向 buffer 写入</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> channel.read(buffer);</span><br><span class="line">                log.debug(<span class="string">&quot;读到字节数：&#123;&#125;&quot;</span>, len);</span><br><span class="line">                <span class="keyword">if</span> (len == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 切换 buffer 读模式</span></span><br><span class="line">                buffer.flip();</span><br><span class="line">                <span class="keyword">while</span>(buffer.hasRemaining()) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, (<span class="type">char</span>)buffer.get());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 切换 buffer 写模式 </span></span><br><span class="line">                <span class="comment">// 还有一种 compact模式 是把未读的部分压缩到前边 然后切换到写模式</span></span><br><span class="line">                buffer.clear();</span><br><span class="line">            &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻塞和非阻塞-nio代码例子"><a href="#阻塞和非阻塞-nio代码例子" class="headerlink" title="阻塞和非阻塞 nio代码例子"></a>阻塞和非阻塞 nio代码例子</h3><p>阻塞和非阻塞nio基础服务端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyf.demo.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hyf.demo.nio.ByteBufferUtil.debugAll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioSocketChannel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置为非阻塞</span></span><br><span class="line">            serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            serverSocketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line">            List&lt;SocketChannel&gt; channelsList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果是阻塞模式 这里会阻塞</span></span><br><span class="line">                <span class="type">SocketChannel</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocketChannel.accept();</span><br><span class="line">                <span class="keyword">if</span> (accept != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 设置为非阻塞</span></span><br><span class="line">                    accept.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                    channelsList.add(accept);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (SocketChannel socketChannel : channelsList) &#123;</span><br><span class="line">                    <span class="comment">// 如果是阻塞模式 这里也会阻塞</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> socketChannel.read(byteBuffer);</span><br><span class="line">                    <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        byteBuffer.flip();</span><br><span class="line">                        debugAll(byteBuffer);</span><br><span class="line">                        byteBuffer.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码的好处是 设置为非阻塞后，我们的客户端连接就不会阻塞，读取也不会阻塞了，但是这样有个问题就是，会消耗大量cpu（cpu空转、利用率太高），所以我们要使用selector模式，使用selector来管理channel，使用一个线程来管理selector</p><h3 id="selecor-的四种事件"><a href="#selecor-的四种事件" class="headerlink" title="selecor 的四种事件"></a>selecor 的四种事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Operation-set bit for read operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; Suppose that a selection key&#x27;s interest set contains</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;OP_READ&lt;/tt&gt; at the start of a &lt;a</span></span><br><span class="line"><span class="comment">     * href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;.  If the selector</span></span><br><span class="line"><span class="comment">     * detects that the corresponding channel is ready for reading, has reached</span></span><br><span class="line"><span class="comment">     * end-of-stream, has been remotely shut down for further reading, or has</span></span><br><span class="line"><span class="comment">     * an error pending, then it will add &lt;tt&gt;OP_READ&lt;/tt&gt; to the key&#x27;s</span></span><br><span class="line"><span class="comment">     * ready-operation set and add the key to its selected-key&amp;nbsp;set.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OP_READ</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Operation-set bit for write operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; Suppose that a selection key&#x27;s interest set contains</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;OP_WRITE&lt;/tt&gt; at the start of a &lt;a</span></span><br><span class="line"><span class="comment">     * href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;.  If the selector</span></span><br><span class="line"><span class="comment">     * detects that the corresponding channel is ready for writing, has been</span></span><br><span class="line"><span class="comment">     * remotely shut down for further writing, or has an error pending, then it</span></span><br><span class="line"><span class="comment">     * will add &lt;tt&gt;OP_WRITE&lt;/tt&gt; to the key&#x27;s ready set and add the key to its</span></span><br><span class="line"><span class="comment">     * selected-key&amp;nbsp;set.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OP_WRITE</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Operation-set bit for socket-connect operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; Suppose that a selection key&#x27;s interest set contains</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;OP_CONNECT&lt;/tt&gt; at the start of a &lt;a</span></span><br><span class="line"><span class="comment">     * href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;.  If the selector</span></span><br><span class="line"><span class="comment">     * detects that the corresponding socket channel is ready to complete its</span></span><br><span class="line"><span class="comment">     * connection sequence, or has an error pending, then it will add</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;OP_CONNECT&lt;/tt&gt; to the key&#x27;s ready set and add the key to its</span></span><br><span class="line"><span class="comment">     * selected-key&amp;nbsp;set.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OP_CONNECT</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Operation-set bit for socket-accept operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; Suppose that a selection key&#x27;s interest set contains</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;OP_ACCEPT&lt;/tt&gt; at the start of a &lt;a</span></span><br><span class="line"><span class="comment">     * href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;.  If the selector</span></span><br><span class="line"><span class="comment">     * detects that the corresponding server-socket channel is ready to accept</span></span><br><span class="line"><span class="comment">     * another connection, or has an error pending, then it will add</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;OP_ACCEPT&lt;/tt&gt; to the key&#x27;s ready set and add the key to its</span></span><br><span class="line"><span class="comment">     * selected-key&amp;nbsp;set.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OP_ACCEPT</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line">```   </span><br><span class="line">### 使用selector 处理nio消息</span><br><span class="line">下面的这个例子是使用selector处理 nio消息的</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> com.hyf.demo.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.CharBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.CharacterCodingException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.CharsetDecoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hyf.demo.nio.ByteBufferUtil.debugAll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioSelectorSocketChannel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 建立selector</span></span><br><span class="line">            <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line"></span><br><span class="line">            <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">            serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 绑定serverSocketChannel</span></span><br><span class="line">            <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> serverSocketChannel.register(selector, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置感兴趣的事件</span></span><br><span class="line">            selectionKey.interestOps(SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置为非阻塞</span></span><br><span class="line">            serverSocketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 阻塞 监听事件的发生  如果事件处理了 select会阻塞 如果没处理 则不阻塞  如果不想处理，那就取消事件cancel()</span></span><br><span class="line">                selector.select();</span><br><span class="line"></span><br><span class="line">                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                        <span class="type">ServerSocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> channel.accept();</span><br><span class="line">                        <span class="comment">// selector都是必须工作在 非阻塞模式</span></span><br><span class="line">                        socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                        <span class="comment">// 注册 到selector上  因为一个selector可以管理多个chanel</span></span><br><span class="line">                        <span class="type">SelectionKey</span> <span class="variable">scKey</span> <span class="operator">=</span> socketChannel.register(selector, <span class="number">0</span>, ByteBuffer.allocate(<span class="number">16</span>));</span><br><span class="line">                        scKey.interestOps(SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">                        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> (ByteBuffer) key.attachment();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> channel.read(byteBuffer);</span><br><span class="line">                        <span class="comment">// 客户端正常断开 返回-1</span></span><br><span class="line">                        <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;</span><br><span class="line">                            key.cancel();</span><br><span class="line">                            channel.close();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 处理粘包</span></span><br><span class="line">                            split(byteBuffer);</span><br><span class="line">                            <span class="comment">// 处理扩容</span></span><br><span class="line">                            <span class="keyword">if</span> (byteBuffer.position() == byteBuffer.limit()) &#123;</span><br><span class="line">                                <span class="type">ByteBuffer</span> <span class="variable">newBytebuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">2</span> * byteBuffer.capacity());</span><br><span class="line">                                byteBuffer.flip();</span><br><span class="line">                                newBytebuffer.put(byteBuffer);</span><br><span class="line">                                key.attach(newBytebuffer);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                            byteBuffer.flip();</span></span><br><span class="line"><span class="comment">//                            debugRead(byteBuffer);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 需要手动删除  不然事件虽然处理了 绑定事件的key还存在</span></span><br><span class="line">                    iterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(ByteBuffer byteBuffer)</span> &#123;</span><br><span class="line"></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; byteBuffer.limit(); i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (byteBuffer.get(i) == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> i + <span class="number">1</span> - byteBuffer.position();</span><br><span class="line"></span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">target</span> <span class="operator">=</span> ByteBuffer.allocate(length);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">                    target.put(byteBuffer.get());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将 position 设置为 0，准备开始读取</span></span><br><span class="line">                target.flip();</span><br><span class="line">                <span class="comment">// 或者将字节转换为字符串并一次性输出</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(target.array(), target.position(), target.remaining());</span><br><span class="line">                System.out.println(output);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        byteBuffer.compact();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面是服务段代码 客户端代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyf.demo.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioSelectorClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketChannel = SocketChannel.open();</span><br><span class="line">            socketChannel.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line">            socketChannel.write(Charset.defaultCharset().encode(<span class="string">&quot;huyunfeinihaocongjianihaok\noolopwew\n&quot;</span>));</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nio编程解决的问题"><a href="#nio编程解决的问题" class="headerlink" title="nio编程解决的问题"></a>nio编程解决的问题</h3><blockquote><p>上面的例子简单解决的以下几个问题</p></blockquote><ol><li>粘包黏包问题（TCP编程必须考虑的问题）</li><li>客户端异常中断或者正常退出处理</li><li>bytebuffer 扩容 （上面只是简单的扩容，但是得考虑bytebuffer的扩容和缩容，做成动态的更好，netty就做的比较好）</li></ol><p>但是如果我们往客户端发送内容，需要注意哪些问题呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyf.demo.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioWrite</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">            <span class="type">SocketAddress</span> <span class="variable">socketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9000</span>);</span><br><span class="line">            serverSocketChannel.bind(socketAddress);</span><br><span class="line"></span><br><span class="line">            serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line"></span><br><span class="line">            <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> serverSocketChannel.register(selector, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">            selectionKey.interestOps(SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                selector.select();</span><br><span class="line"></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                    iterator.remove();;</span><br><span class="line">                    <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="type">ServerSocketChannel</span> <span class="variable">ssc</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line"></span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> ssc.accept();</span><br><span class="line">                        socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="type">SelectionKey</span> <span class="variable">sckey</span> <span class="operator">=</span> socketChannel.register(selector, <span class="number">0</span>, SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">                        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3000000</span>; i++) &#123;</span><br><span class="line">                            stringBuffer.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> Charset.defaultCharset().encode(stringBuffer.toString());</span><br><span class="line">                        <span class="type">int</span> <span class="variable">write</span> <span class="operator">=</span> socketChannel.write(byteBuffer);</span><br><span class="line">                        log.info(<span class="string">&quot;实际写入了 &#123;&#125;&quot;</span>, write);</span><br><span class="line">                        <span class="keyword">if</span> (byteBuffer.hasRemaining()) &#123;</span><br><span class="line">                            sckey.interestOps(SelectionKey.OP_WRITE + sckey.interestOps());</span><br><span class="line">                            sckey.attach(byteBuffer);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">                        log.info(<span class="string">&quot;write able...&quot;</span>);</span><br><span class="line">                        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> (ByteBuffer) key.attachment();</span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel)key.channel();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">write</span> <span class="operator">=</span> channel.write(byteBuffer);</span><br><span class="line">                        <span class="keyword">if</span>(!byteBuffer.hasRemaining())&#123;</span><br><span class="line">                            log.info(<span class="string">&quot;cancel wrible&quot;</span>);</span><br><span class="line">                            key.interestOps(key.interestOps()-SelectionKey.OP_WRITE);</span><br><span class="line">                            key.attach(<span class="literal">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        log.info(<span class="string">&quot;实际写入了 &#123;&#125;&quot;</span>, write);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的客户端例子如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyf.demo.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioReadClient</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line"></span><br><span class="line">        <span class="type">SocketAddress</span> <span class="variable">socketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9000</span>);</span><br><span class="line">        socketChannel.connect(socketAddress);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> socketChannel.read(byteBuffer);</span><br><span class="line">            count += read;</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Selector selector = Selector.open();</span></span><br><span class="line"><span class="comment">//        socketChannel.configureBlocking(false);</span></span><br><span class="line"><span class="comment">//        socketChannel.register(selector, SelectionKey.OP_CONNECT + SelectionKey.OP_READ);</span></span><br><span class="line"><span class="comment">//        int count = 0;</span></span><br><span class="line"><span class="comment">//        while (true) &#123;</span></span><br><span class="line"><span class="comment">//            selector.select();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            while (iterator.hasNext())&#123;</span></span><br><span class="line"><span class="comment">//                SelectionKey sk = iterator.next();</span></span><br><span class="line"><span class="comment">//                iterator.remove();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                if(sk.isConnectable())&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;connect...&quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                else if(sk.isReadable())&#123;</span></span><br><span class="line"><span class="comment">//                    ByteBuffer byteBuffer = ByteBuffer.allocate(1024);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    int read = socketChannel.read(byteBuffer);</span></span><br><span class="line"><span class="comment">//                    count += read;</span></span><br><span class="line"><span class="comment">//                    System.out.println(count);</span></span><br><span class="line"><span class="comment">//                    byteBuffer.clear();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程优化nio代码"><a href="#多线程优化nio代码" class="headerlink" title="多线程优化nio代码"></a>多线程优化nio代码</h3><p>以上我们展示了nio的读取、写入 以及遇到的问题，但是思考一个问题，我们要实现的是一个高性能的服务器，那么如果有大量连接请求进来，在处理read事件的时候要很久，那单线程是不是就无能为力了，所以我们要将上面的代码优化成多线程的方式，就是一个线程负责建立连接、另外一些线程专门负责读写，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyf.demo.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.CharBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioThreadWork</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;boss&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个serverSocketChannel</span></span><br><span class="line">            <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">            <span class="comment">// 绑定一个端口</span></span><br><span class="line">            <span class="type">SocketAddress</span> <span class="variable">socketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9999</span>);</span><br><span class="line">            serverSocketChannel.bind(socketAddress);</span><br><span class="line">            <span class="comment">// 设置为false</span></span><br><span class="line">            serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 打开一个selector</span></span><br><span class="line">            <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">            <span class="comment">// 注册chanel 到 selector上</span></span><br><span class="line">            <span class="type">SelectionKey</span> <span class="variable">boosKey</span> <span class="operator">=</span> serverSocketChannel.register(selector, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 注册感兴趣的事件</span></span><br><span class="line">            boosKey.interestOps(SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">            <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;work&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                log.info(<span class="string">&quot;等待连接中&quot;</span>);</span><br><span class="line">                selector.select();</span><br><span class="line"></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                    <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                        log.info(<span class="string">&quot;连接事件建立&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="type">ServerSocketChannel</span> <span class="variable">ssc</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> ssc.accept();</span><br><span class="line">                        socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                        log.info(<span class="string">&quot;注册读取事件 before&quot;</span>);</span><br><span class="line">                        worker.register(socketChannel);</span><br><span class="line">                        log.info(<span class="string">&quot;注册读取事件 after&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Thread thread;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> Selector selector;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">start</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> ConcurrentLinkedDeque&lt;Runnable&gt; linkedDeque = <span class="keyword">new</span> <span class="title class_">ConcurrentLinkedDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!start) &#123;</span><br><span class="line">                thread = <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>, name);</span><br><span class="line">                thread.start();</span><br><span class="line">                selector = Selector.open();</span><br><span class="line">                start = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            linkedDeque.offer(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClosedChannelException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            selector.wakeup();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SneakyThrows</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">Runnable</span> <span class="variable">poll</span> <span class="operator">=</span> linkedDeque.poll();</span><br><span class="line">                <span class="keyword">if</span> (poll != <span class="literal">null</span>) &#123;</span><br><span class="line">                    poll.run();</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(<span class="string">&quot;读取事件阻塞&quot;</span>);</span><br><span class="line">                selector.select();</span><br><span class="line"></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                    iterator.remove();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                        log.info(<span class="string">&quot;读数据开始&quot;</span>);</span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">                        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">                        channel.read(byteBuffer);</span><br><span class="line">                        byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">                        <span class="type">CharBuffer</span> <span class="variable">decode</span> <span class="operator">=</span> Charset.defaultCharset().decode(byteBuffer);</span><br><span class="line">                        <span class="keyword">while</span> (decode.hasRemaining()) &#123;</span><br><span class="line">                            log.info(<span class="string">&quot;content &#123;&#125;&quot;</span>, decode.get());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyf.demo.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioThreadClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span>SocketChannel.open();</span><br><span class="line"></span><br><span class="line">            <span class="type">SocketAddress</span> <span class="variable">socketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9999</span>);</span><br><span class="line">            socketChannel.connect(socketAddress);</span><br><span class="line"></span><br><span class="line">            socketChannel.write(Charset.defaultCharset().encode(<span class="string">&quot;你好&quot;</span>));</span><br><span class="line"></span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码便实现了一个简易的多线程版本的读写服务端和客户端，如果再完善的话，可以加上我们之前的各种优化点，对bytebuffer的扩容、对粘包的处理，对客户端异常关闭正常关闭的处理等 会让代码更加完善，但是我们自己处理还是会有很多问题，比如nio有很多代码其实是一样的，而且还有一个臭名昭著的空轮训导致cpu打满的问题，所以有必要封装一套高性能的网络框架来处理这些问题，也就是大名鼎鼎的netty</p><p>所以下一篇,我就来简单介绍下netty的使用以及原理</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇说过了基础IO流的操作，这篇简单说一下网络编程，网络编程就我自己理解就是在网络世界中进行数据的互相传递，它基于OSI七层模型，进行层层封装，来将数据最终封装成了一个个数据包，然后发往另外一端，这篇暂时不说TCP、UDP以及socket通信的其它协议，这篇只说一下跟IO相关的网络编程&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://hxq94.github.io/categories/java/"/>
    
    <category term="网络编程" scheme="https://hxq94.github.io/categories/java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="网络编程" scheme="https://hxq94.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>IO 流</title>
    <link href="https://hxq94.github.io/2023/05/05/IO/"/>
    <id>https://hxq94.github.io/2023/05/05/IO/</id>
    <published>2023-05-05T12:42:35.044Z</published>
    <updated>2023-06-10T14:02:07.737Z</updated>
    
    <content type="html"><![CDATA[<p>IO是网络世界中不可获缺的并且很重要的一部分，它是input|output的缩写，有了它，我们才能在网络中传输数据，包括输入和输出</p><span id="more"></span><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><blockquote><p>输入流：主要有InputStream 和 Reader这两个字节和字符流</p></blockquote><blockquote><p>输出流：主要有OutputStream 和 Writer这两个字节和字符流</p></blockquote><blockquote><p>字节流：可以操作任何数据</p></blockquote><blockquote><p>字符流：转么用来操作字符的，比较方便</p></blockquote><h3 id="常用的流"><a href="#常用的流" class="headerlink" title="常用的流"></a>常用的流</h3><p>流的种类很多，我们只需要知道常用的流，知道他们的原理就好，以后用到其他的再去查阅即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileInputStream/FileReader </span></span><br><span class="line"><span class="comment">// FileOutputStream/FileWriter</span></span><br><span class="line"><span class="keyword">package</span> com.hyf.demo.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStreamTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将一个文本写入到一个文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">txt</span> <span class="operator">=</span> <span class="string">&quot;hello java&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/huyunfei/Downloads/java.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file, <span class="literal">true</span>);</span><br><span class="line">            fileInputStream.write(txt.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取路径中的数据  输出到控制台</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="comment">// 1. 这种方式是一个一个字节读取</span></span><br><span class="line">            <span class="type">int</span> msg;</span><br><span class="line">            <span class="keyword">while</span> ((msg = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println((<span class="type">char</span>) msg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2. 这种方式是1024个字节读取</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> (fileInputStream.read(bytes) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是最基础的输入输出,还有专门用于读取字符的流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyf.demo.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferReaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将一个文本写入到一个文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">txt</span> <span class="operator">=</span> <span class="string">&quot;hello buffer\n&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/huyunfei/Downloads/java.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">            bufferedOutputStream.write(txt.getBytes());</span><br><span class="line">            bufferedOutputStream.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字符buffer写入基础代码</span></span><br><span class="line"><span class="comment">//            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));</span></span><br><span class="line"><span class="comment">//            bufferedWriter.write(txt);</span></span><br><span class="line"><span class="comment">//            bufferedWriter.newLine();</span></span><br><span class="line"><span class="comment">//            bufferedWriter.flush();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取路径中的数据  输出到控制台</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file));</span><br><span class="line">            <span class="comment">// 1. 这种方式是一行一行读取</span></span><br><span class="line">            String msg;</span><br><span class="line">            <span class="keyword">while</span> ((msg = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2. 这种方式是1024个字节读取 上面读取完毕后 流里面的数据会清空</span></span><br><span class="line"><span class="comment">//            char[] bytes = new char[1024];</span></span><br><span class="line"><span class="comment">//            while (bufferedReader.read(bytes) != -1) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(new String(bytes));</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bufferedReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是按照带buffer的流读取的基础代码</p><p><h3 id="牵扯到的两个问题"><a href="#牵扯到的两个问题" class="headerlink" title="牵扯到的两个问题"></a>牵扯到的两个问题</h3><h4 id="为什么要出现带缓冲区的流"><a href="#为什么要出现带缓冲区的流" class="headerlink" title="为什么要出现带缓冲区的流"></a>为什么要出现带缓冲区的流</h4><h4 id="使用带缓冲的流包装基础流涉及到的设计模式"><a href="#使用带缓冲的流包装基础流涉及到的设计模式" class="headerlink" title="使用带缓冲的流包装基础流涉及到的设计模式"></a>使用带缓冲的流包装基础流涉及到的设计模式</h4><blockquote><p>接着我们来解释第一个问题，为什么要使用带缓冲区的流?</p></blockquote><ol><li><p>一般来说我们进行频繁数据读写的时候，很耗费性能，于是我们需要将需要读写的数据找到一个地方暂存起来，然后进行一个批量的读写，用的也是顺序写，用来缓解不同设备之间频繁的数据读写，于是有了缓冲区的出现</p></li><li><p>怎么证明使用了buffer 比不使用buffer 速度快呢？</p><ol><li>源码如下</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span> b[], <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//在这判断需要写的数据长度是否已经超出容器的长度（8192byte）了,如果超出则直接写到相应的outputStream中,并清空缓冲区</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt;= buf.length) &#123;</span><br><span class="line">        <span class="comment">/* If the request length exceeds the size of the output buffer,</span></span><br><span class="line"><span class="comment">           flush the output buffer and then write the data directly.</span></span><br><span class="line"><span class="comment">           In this way buffered streams will cascade harmlessly. */</span></span><br><span class="line">        flushBuffer();</span><br><span class="line">        out.write(b, off, len);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断缓冲区剩余的容量是否还够写入当前len的内容,如果不够则清空缓冲区</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt; buf.length - count) &#123;</span><br><span class="line">        flushBuffer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将要写的数据先放入内存中,等待数据达到了缓冲区的长度后,再写到相应的outputStream中</span></span><br><span class="line">    System.arraycopy(b, off, buf, count, len);</span><br><span class="line">    count += len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 他不是每次都调用系统的write 而是积攒到8192byte后才调用一次write 大大减少了系统调用</span></span><br></pre></td></tr></table></figure><ol start="2"><li>实验如下</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OSFileIO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">byte</span>[] data = <span class="string">&quot;123456789\n&quot;</span>.getBytes();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/data/io/out.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">switch</span> (args[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;0&quot;</span>:</span><br><span class="line">                testBasicFileIO();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                testBufferedFileIO();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBasicFileIO</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            out.write(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBufferedFileIO</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            out.write(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这段代码来源于网络</span></span><br></pre></td></tr></table></figure><p> 将这段代码上传到linux目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/huyunfei/Documents/study/testCase/io</span><br></pre></td></tr></table></figure><p> 然后执行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译java文件</span></span><br><span class="line">javac OSFileIO.java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用strace 分析这个程序涉及到的系统调用</span></span><br><span class="line">strace -ff -o out java OSFileIO $1</span><br></pre></td></tr></table></figure><p> 可以发现最终的结果是，不使用buffer的流，系统调用的write很多，而使用了buffer的达到了8192 byte才会进行一个系统write调用，所以很明显使用buffer后速度更快</p></li></ol><blockquote><p>第二个问题 这里涉及到的设计模式是什么</p></blockquote><ol><li>流中涉及到的设计模式最经典的就是装饰者模式，就是在已有类上进行装饰增强。这样做的优点是可以不改变已有的类，比继承灵活，完全遵循开闭原则；缺点是增加了更多的类，多层装饰增加了代码复杂性</li></ol><p>其实还有一些常用的流，比如对象流（可以直接传输对象）、还有我们一般对于文件的读写比较多，但是频繁的文件读写并不好，所以我们可以使用字节数组流，也称为内存流，</p><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyf.demo.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectIOTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将一个对象序列化到文件中</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;libei&quot;</span>, <span class="number">18</span>);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/huyunfei/Downloads/java.txt&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">writeObjectStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">            writeObjectStream.writeObject(student);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将文件中对象反序列化出来</span></span><br><span class="line"></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/huyunfei/Downloads/java.txt&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">readObjectStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line"></span><br><span class="line">            <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> (Student) readObjectStream.readObject();</span><br><span class="line">            System.out.println(student1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里一定要实现序列化接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节数组流"><a href="#字节数组流" class="headerlink" title="字节数组流"></a>字节数组流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyf.demo.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteArrayInputStreamTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">dataOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(byteArrayOutputStream);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataOutputStream.writeDouble(Math.random());</span><br><span class="line">            dataOutputStream.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">DataInputStream</span> <span class="variable">dataInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(byteArrayInputStream);</span><br><span class="line">            System.out.println(dataInputStream.available());</span><br><span class="line">            System.out.println(dataInputStream.readBoolean());</span><br><span class="line">            System.out.println(dataInputStream.readDouble());</span><br><span class="line">            System.out.println(dataInputStream.available());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的流就这些，我们在日常工作用到了查手册就好。</p><h3 id="选用哪种流"><a href="#选用哪种流" class="headerlink" title="选用哪种流"></a>选用哪种流</h3><blockquote><p>记得刚才我们分析过了有一个BufferOutoutStream为什么快，那它和这个内存流ByteOutputStream有什么区别呢？</p></blockquote><p>ByteOutputStream 会每次创建一个32个byte的buffer，每次写入的时候会对比剩余容量是否够用，如果不够用就grow这个buffer 继续写入，一直等数据写完，这些数据都是在内存的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span> b[], <span class="type">int</span> off, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> ((off &lt; <span class="number">0</span>) || (off &gt; b.length) || (len &lt; <span class="number">0</span>) ||</span><br><span class="line">           ((off + len) - b.length &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 确保buffer 足够</span></span><br><span class="line">       ensureCapacity(count + len);</span><br><span class="line">       System.arraycopy(b, off, buf, count, len);</span><br><span class="line">       count += len;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>所以如果想要快速写入的话，使用ByteArrayOutputStream,如果资源不太够用的时候，应该选择BufferOutputStream</p><blockquote><p>下一篇说一下各种IO的区别和背景，以及网络IO的演进</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;IO是网络世界中不可获缺的并且很重要的一部分，它是input|output的缩写，有了它，我们才能在网络中传输数据，包括输入和输出&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://hxq94.github.io/categories/java/"/>
    
    <category term="IO" scheme="https://hxq94.github.io/categories/java/IO/"/>
    
    
    <category term="IO" scheme="https://hxq94.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>锁分析</title>
    <link href="https://hxq94.github.io/2022/06/04/%E9%94%81%E5%88%86%E6%9E%90/"/>
    <id>https://hxq94.github.io/2022/06/04/%E9%94%81%E5%88%86%E6%9E%90/</id>
    <published>2022-06-04T12:19:09.736Z</published>
    <updated>2023-04-27T14:46:18.760Z</updated>
    
    <content type="html"><![CDATA[<h3 id="synchronized-实现原理"><a href="#synchronized-实现原理" class="headerlink" title="synchronized 实现原理"></a>synchronized 实现原理</h3><ol><li>synchronized是jvm层面的一种锁,如果是多个jvm则只能在一个jvm中生效 它能保证有序性、可见、原子性</li><li>synchronized可以加在方法上 可以是一个代码块，wait/notify也以来monitor对象 这就是为什么要用在同步中的原因<span id="more"></span></li><li>synchronized 最终锁住的是一个对象的monitor。java是编译成为class文件 jvm拿到这个class文件后可以得到要执行的jvm指令，他会把这些指令根据c++代码解析后翻译成为机器码 交给操作系统去执行。 在jvm底层操作jvm指令的源码发现 其实monitor是有一个数据结构的 比如owner 存放的是目前占有锁的线程 EntryList存放的后续来竞争锁的线程 WaitSet 是存放之前获取过锁，但是在WAEIING状态的线程的</li><li>在1.5之前他是直接在操作系统层面加锁，所以比较重，在1.6之后可以通过锁升级机制来让锁的性能提高  大概就是可以从无锁、偏向锁、轻量级锁到最后的重量级锁<br>偏向锁就是存在同步但无竞争的情况 比如spring的源码，它里面有一些方法加了同步 但是基本是没有竞争的 那这样的话每次直接判断一下owner中的线程是不是同一个就可以了<br>假设存在少量的几个竞争 那么就会升级成为轻量级锁，轻量级锁他是使用了cas机制，没有获取到锁不会挂起等待，所以就不涉及到cpu调度、线程切换这些比较重的操作，他会一直空轮训自适应自旋 但是这样会耗费cpu资源，所以一旦判断自旋超过多少次，就会觉得线程竞争很厉害，就转换为重量级锁</li></ol><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><ol><li>cas 是比较和交换的意思 是乐观锁的一种实现 可以解决并发问题 它主要实现原理是这样的<br> 有一个主存中的最终结果值 他是被valitile修饰的<br> 还有每一个线程进来后会有一个拿到的值<br> 以及我们要修改的值<br>比如 两个线程并发了 第一个线程拿到是50 第二个线程拿到的也是50 要修改成60<br>在修改成60的时候会把当前拿到的值跟内存中的结果值比较一下 如果一样，才修改成功<br>那么此时这个场景就是<br>a线程拿到50 进行修改 判断50和内存中的50一致 修改成功 内存中值变为60<br>b线程拿到的也是50 进行修改 判断50和当前内存值60 不一致 修改失败  这样就使用cas解决了并发问题<br>但是cas会有两个问题 : 原子性问题和ABA问题<br>原子性问题：判断和修改是两步操作 看底层是使用的lock实现 所以解决原子性问题<br>ABA问题： 假设有三个线程 a,b,c 并发了<br>a线程要把100变为50 b线程也要把100变为50 c线程要把50变为100<br>假设此时a线程 成功执行了  b线程刚执行完和a拿到100这个步骤，阻塞了；此时c线程执行50变100操作成功，也就在此时b线程恢复了 又把100 变成了50 ；这就出现了问题<br>如果要解决的话 需要加一个版本号 更新的时候把版本号更新+1 且判断条件加上版本判断</li></ol><h3 id="LongAdder-和-AtomicInterger"><a href="#LongAdder-和-AtomicInterger" class="headerlink" title="LongAdder 和 AtomicInterger"></a>LongAdder 和 AtomicInterger</h3><p>AtomicInterger 实现了cas操作<br>LongAdder 是优化后的cas  原理是把数据分段后作cas++ 会根据来的线程多少动态的扩缩数据分段 最后再做累加 分多少段其实理论上性能就提高多少倍<br>threadLocal也能解决 多个线程操作同一变量的问题</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><ol><li>多个jvm的时候使用分布式锁 </li><li>有多个实现版本 基于mysql的 redis的 zookeeper的</li><li>分布式锁使用最基础版本的redis的话  需要注意以下几点<br>（1）在设置key的时候要把value设置为能标识当前线程的值<br>（2）且设置一个过期时间，并且使用的是setnx原子操作<br>（3）释放锁要写到finally里面 释放锁的时候要判断是当前线程持有的锁才释放 避免释放掉其他线程的锁 且这两步要是一个原子操作 使用lua脚本来实现<br>（4）要搞一个守护线程，假设锁内业务逻辑没有执行完 要续过期时间</li><li>基于以上问题 redsi帮助我们封装了一个redisson客户端 帮助我们封装了以上操作</li><li>但是如果我们使用的是redis集群，那么会有一个问题<br> 主从同步场景的时候 如果刚给master上锁成功 master给slave同步数据的时候挂掉了，那么此时再获取锁的时候，在从节点是获取不到锁的，因为redis的模型是AP,只能保证可用性和分区容错性，保证不了一致性<br> 所以此时应该考虑使用redlock去完成分布式锁的添加，但是网上有redlock的问题，所以做分布式锁还是应该优先考虑zookeeper<br> 如果是在删除锁的时候没有用lua脚本也是会有问题的：比如判断是否是同一线程持有的锁已经通过了 a线程此时开始阻塞 刚好这时候通过过期时间过期了锁，那么线程b拿到锁，此时a线程开始执行 就会把线程b的锁释放掉</li><li>为什么要选择zookeeper<br> 因为zookeeper是基于CP模型的数据模型，zab来保证一致性问题，所以会导致zookerper比redis性能低，但是我们的场景又是高并发下的分布式锁问题，<br> 如果对于并发出现的问题不能容忍，那么应该优先选用zookeeper，并且redlock 需要至少5个节点 从效率上说其实也不快了 </li><li>牵扯到的一个秒杀情况下使用分布式锁的性能问题 其实还是分段思想，将库存分布在不同的锁中，那么性能会提示很多</li><li>可以解决缓存和数据库双写不一致的问题（市面上有延时双删、内存队列，优化可以使用读写锁）</li></ol><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><ol><li>锁的一个关键就是 有并发 并且有竞争</li><li>公平锁判断state为0的时候 不能直接cas获取锁 因为是公平锁，此时可能有很多线程已经在排队了</li><li>其它线程入队时候 他要自旋2次，自旋两次的时候会尝试获取锁 </li><li>比如有三个线程 此时第一个已经释放了，第二个就会拿到锁 且变为thread==null的head节点，但是此时第三个线程来了 在入队过程中他要自旋，那么此时就会判断：来询问能否获取到锁的线程，是不是除去thread==null那个节点的第二个节点 如果不是thread==null的那个节点的线程 肯定不能获取锁</li><li>第二个线程来入队的时候会进行自旋 自旋的时候会判断：锁是自由状态 且去竞争的线程是thread==null后面的节点的线程才有资格进行cas获取锁 可重入的时候也会判断<br>持有锁的线程永远不在队列中</li></ol><p>return h != t &amp;&amp;<br>            ((s = h.next) == null || s.thread != Thread.currentThread());</p><p>第一种：队列没有初始化 h!=t 返回false 返回false 意味着可以尝试cas获取锁<br>第二种：如果队列初始化了，初始化后 分两种情况<br>    1.1: 如果队列中的元素比较多 那么h!t 返回true  返回true 要分为两种情况<br>        1.1.1  如果(s = h.next) == null 返回true 说明有两个元素  后面的 s.thread != Thread.currentThread() 就不判断了 那么肯定要排队<br>        1.1.2  如果(s = h.next) == null 返回false 说明有多个元素  此时 s.thread != Thread.currentThread() 如果返回true 说明不是重入 肯定要排队  如果返回false 说明是重入的 那么可以尝试cas获取锁<br>    1.2: 如果队列中的元素只有一个，说明最后一个线程加锁了 前面的都已经unlock了  此时 h!=t返回的是 false 那么直接去cas竞争锁</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;synchronized-实现原理&quot;&gt;&lt;a href=&quot;#synchronized-实现原理&quot; class=&quot;headerlink&quot; title=&quot;synchronized 实现原理&quot;&gt;&lt;/a&gt;synchronized 实现原理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;synchronized是jvm层面的一种锁,如果是多个jvm则只能在一个jvm中生效 它能保证有序性、可见、原子性&lt;/li&gt;
&lt;li&gt;synchronized可以加在方法上 可以是一个代码块，wait/notify也以来monitor对象 这就是为什么要用在同步中的原因</summary>
    
    
    
    <category term="java" scheme="https://hxq94.github.io/categories/java/"/>
    
    <category term="锁分析" scheme="https://hxq94.github.io/categories/java/%E9%94%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="java" scheme="https://hxq94.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hxq94.github.io/2022/03/27/hello-world/"/>
    <id>https://hxq94.github.io/2022/03/27/hello-world/</id>
    <published>2022-03-27T10:30:32.722Z</published>
    <updated>2023-04-27T14:17:47.981Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://hxq94.github.io/categories/java/"/>
    
    <category term="hello word" scheme="https://hxq94.github.io/categories/java/hello-word/"/>
    
    
    <category term="java" scheme="https://hxq94.github.io/tags/java/"/>
    
  </entry>
  
</feed>
