{"posts":[{"title":"锁分析","text":"synchronized 实现原理 synchronized是jvm层面的一种锁,如果是多个jvm则只能在一个jvm中生效 它能保证有序性、可见、原子性 synchronized可以加在方法上 可以是一个代码块，wait/notify也以来monitor对象 这就是为什么要用在同步中的原因 synchronized 最终锁住的是一个对象的monitor。java是编译成为class文件 jvm拿到这个class文件后可以得到要执行的jvm指令，他会把这些指令根据c++代码解析后翻译成为机器码 交给操作系统去执行。 在jvm底层操作jvm指令的源码发现 其实monitor是有一个数据结构的 比如owner 存放的是目前占有锁的线程 EntryList存放的后续来竞争锁的线程 WaitSet 是存放之前获取过锁，但是在WAEIING状态的线程的 在1.5之前他是直接在操作系统层面加锁，所以比较重，在1.6之后可以通过锁升级机制来让锁的性能提高 大概就是可以从无锁、偏向锁、轻量级锁到最后的重量级锁偏向锁就是存在同步但无竞争的情况 比如spring的源码，它里面有一些方法加了同步 但是基本是没有竞争的 那这样的话每次直接判断一下owner中的线程是不是同一个就可以了假设存在少量的几个竞争 那么就会升级成为轻量级锁，轻量级锁他是使用了cas机制，没有获取到锁不会挂起等待，所以就不涉及到cpu调度、线程切换这些比较重的操作，他会一直空轮训自适应自旋 但是这样会耗费cpu资源，所以一旦判断自旋超过多少次，就会觉得线程竞争很厉害，就转换为重量级锁 CAS cas 是比较和交换的意思 是乐观锁的一种实现 可以解决并发问题 它主要实现原理是这样的 有一个主存中的最终结果值 他是被valitile修饰的 还有每一个线程进来后会有一个拿到的值 以及我们要修改的值比如 两个线程并发了 第一个线程拿到是50 第二个线程拿到的也是50 要修改成60在修改成60的时候会把当前拿到的值跟内存中的结果值比较一下 如果一样，才修改成功那么此时这个场景就是a线程拿到50 进行修改 判断50和内存中的50一致 修改成功 内存中值变为60b线程拿到的也是50 进行修改 判断50和当前内存值60 不一致 修改失败 这样就使用cas解决了并发问题但是cas会有两个问题 : 原子性问题和ABA问题原子性问题：判断和修改是两步操作 看底层是使用的lock实现 所以解决原子性问题ABA问题： 假设有三个线程 a,b,c 并发了a线程要把100变为50 b线程也要把100变为50 c线程要把50变为100假设此时a线程 成功执行了 b线程刚执行完和a拿到100这个步骤，阻塞了；此时c线程执行50变100操作成功，也就在此时b线程恢复了 又把100 变成了50 ；这就出现了问题如果要解决的话 需要加一个版本号 更新的时候把版本号更新+1 且判断条件加上版本判断 LongAdder 和 AtomicIntergerAtomicInterger 实现了cas操作LongAdder 是优化后的cas 原理是把数据分段后作cas++ 会根据来的线程多少动态的扩缩数据分段 最后再做累加 分多少段其实理论上性能就提高多少倍threadLocal也能解决 多个线程操作同一变量的问题 分布式锁 多个jvm的时候使用分布式锁 有多个实现版本 基于mysql的 redis的 zookeeper的 分布式锁使用最基础版本的redis的话 需要注意以下几点（1）在设置key的时候要把value设置为能标识当前线程的值（2）且设置一个过期时间，并且使用的是setnx原子操作（3）释放锁要写到finally里面 释放锁的时候要判断是当前线程持有的锁才释放 避免释放掉其他线程的锁 且这两步要是一个原子操作 使用lua脚本来实现（4）要搞一个守护线程，假设锁内业务逻辑没有执行完 要续过期时间 基于以上问题 redsi帮助我们封装了一个redisson客户端 帮助我们封装了以上操作 但是如果我们使用的是redis集群，那么会有一个问题 主从同步场景的时候 如果刚给master上锁成功 master给slave同步数据的时候挂掉了，那么此时再获取锁的时候，在从节点是获取不到锁的，因为redis的模型是AP,只能保证可用性和分区容错性，保证不了一致性 所以此时应该考虑使用redlock去完成分布式锁的添加，但是网上有redlock的问题，所以做分布式锁还是应该优先考虑zookeeper 如果是在删除锁的时候没有用lua脚本也是会有问题的：比如判断是否是同一线程持有的锁已经通过了 a线程此时开始阻塞 刚好这时候通过过期时间过期了锁，那么线程b拿到锁，此时a线程开始执行 就会把线程b的锁释放掉 为什么要选择zookeeper 因为zookeeper是基于CP模型的数据模型，zab来保证一致性问题，所以会导致zookerper比redis性能低，但是我们的场景又是高并发下的分布式锁问题， 如果对于并发出现的问题不能容忍，那么应该优先选用zookeeper，并且redlock 需要至少5个节点 从效率上说其实也不快了 牵扯到的一个秒杀情况下使用分布式锁的性能问题 其实还是分段思想，将库存分布在不同的锁中，那么性能会提示很多 可以解决缓存和数据库双写不一致的问题（市面上有延时双删、内存队列，优化可以使用读写锁） AQS可重入锁 锁的一个关键就是 有并发 并且有竞争 公平锁判断state为0的时候 不能直接cas获取锁 因为是公平锁，此时可能有很多线程已经在排队了 其它线程入队时候 他要自旋2次，自旋两次的时候会尝试获取锁 比如有三个线程 此时第一个已经释放了，第二个就会拿到锁 且变为thread==null的head节点，但是此时第三个线程来了 在入队过程中他要自旋，那么此时就会判断：来询问能否获取到锁的线程，是不是除去thread==null那个节点的第二个节点 如果不是thread==null的那个节点的线程 肯定不能获取锁 第二个线程来入队的时候会进行自旋 自旋的时候会判断：锁是自由状态 且去竞争的线程是thread==null后面的节点的线程才有资格进行cas获取锁 可重入的时候也会判断持有锁的线程永远不在队列中 return h != t &amp;&amp; ((s = h.next) == null || s.thread != Thread.currentThread()); 第一种：队列没有初始化 h!=t 返回false 返回false 意味着可以尝试cas获取锁第二种：如果队列初始化了，初始化后 分两种情况 1.1: 如果队列中的元素比较多 那么h!t 返回true 返回true 要分为两种情况 1.1.1 如果(s = h.next) == null 返回true 说明有两个元素 后面的 s.thread != Thread.currentThread() 就不判断了 那么肯定要排队 1.1.2 如果(s = h.next) == null 返回false 说明有多个元素 此时 s.thread != Thread.currentThread() 如果返回true 说明不是重入 肯定要排队 如果返回false 说明是重入的 那么可以尝试cas获取锁 1.2: 如果队列中的元素只有一个，说明最后一个线程加锁了 前面的都已经unlock了 此时 h!=t返回的是 false 那么直接去cas竞争锁","link":"/2022/06/04/%E9%94%81%E5%88%86%E6%9E%90/"},{"title":"命令","text":"今天整了下仓库，和电脑上的文件，发现有很多是零散的，不是太规整（虽然之前也不是乱放的），但是文件多了就有点乱了，今天抽空把项目整理下 常用命令mac 切换jdk版本 mac 切换jdk版本 123456# .zshrc文件中 添加以下配置:export JAVA_8_HOME=&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_261.jdk/Contents/Home&quot;export JAVA_17_HOME=&quot;/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home&quot;export JAVA_HOME=$JAVA_8_HOMEalias jdk8=&quot;export JAVA_HOME=$JAVA_8_HOME&quot;alias jdk17=&quot;export JAVA_HOME=$JAVA_17_HOME&quot; 然后执行 1source ~/.zshrc kafka快速体验docker-compose kafka快速体验docker-compose 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647version: &quot;4&quot;services: zookeeper: image: 'bitnami/zookeeper:latest' ports: - '2181:2181' environment: # 匿名登录--必须开启 - ALLOW_ANONYMOUS_LOGIN=yes #volumes: #- ./zookeeper:/bitnami/zookeeper # 该镜像具体配置参考 https://github.com/bitnami/bitnami-docker-kafka/blob/master/README.md kafka: image: 'bitnami/kafka:2.8.0' container_name: 'small-kafka' ports: - '9092:9092' - '9999:9095' environment: - KAFKA_BROKER_ID=1 - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092 # 客户端访问地址，更换成自己的 - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://192.168.26.100:9092 - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181 # 允许使用PLAINTEXT协议(镜像中默认为关闭,需要手动开启) - ALLOW_PLAINTEXT_LISTENER=yes # 关闭自动创建 topic 功能 - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false # 全局消息过期时间 6 小时(测试时可以设置短一点) - KAFKA_CFG_LOG_RETENTION_HOURS=6 # 开启JMX监控 # - JMX_PORT=9999 #volumes: #- ./kafka:/bitnami/kafka depends_on: - zookeeper # Web 管理界面 另外也可以用exporter+prometheus+grafana的方式来监控 https://github.com/danielqsj/kafka_exporter kafka_manager: image: 'hlebalbau/kafka-manager:latest' ports: - &quot;9000:9000&quot; environment: ZK_HOSTS: &quot;zookeeper:2181&quot; APPLICATION_SECRET: letmein depends_on: - zookeeper - kafka 查看git config123你可以通过以下命令查看所有的配置以及它们所在的文件：$ git config --list --show-origin 备份hexo12345678910111. 先拉一个新的分支做备份，我这里叫hexo2. 由于hexo其实提交到git的是.depoy.git的东西，blog下是没有.git的所以我们先要在blog 的根目录 执行 git init3. 由于此时还没有和远程关联起来，所以要执行 git remote add origin git@github.com:hxq94/hxq94.github.io.git4. 然后执行git remote -v 查看是否已经关联5. 然后git fetch 6. git checkout hexo5. 然后执行git add .6. 可以使用git status 查看添加的文件7. 然后git commit -m &quot;init&quot;8. 然后git push -u origin hexo 恢复hexo123451. git clone &quot;git@github.com:hxq94/hxq94.github.io.git&quot;2. npm install hexo-cli3. npm install4. npm install hexo-deployer-git5. 和之前一样 hexo clean g d","link":"/2023/12/23/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"netty","text":"nio 虽然使用了多路复用，但是真正实现一个网络编程还需要考虑很多问题，所以出现了netty这种基于nio的网络编程框架，来帮助我们简化开发网络相关问题的难度，netty使用异步的方式来接收各种事件，并提供链式pipeline的方式帮助我们处理数据，并且增强了nio的ByteBuffer，还提供了一系列例如心跳、异步等方式来帮助我们构建代码 netty架构从网上找了两张图，netty的总体架构，以及netty的线程模型如下 这张图表明了netty可以有多个eventloopGroup 每个eventLoopGroup中包含多个eventLoop，可以帮助我们异步执行一些io事件，并且还表明netty中有多条流水线，其中每个流水线pipline都必然有一个head和tail的双向链表来对应入站和出站，一般来说，出战需要编码，入站需要解码，如果pipeline上的事件需要处理很久，那么可以交给链上的下一个处理器处理，也可以放入任务队列执行，这样变相提高了处理速度 通过eventLoop可以拿到channel，进而处理我们的io事件 上一个栗子最简单的netty服务器一个简单的netty的网络编程🌰 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122// 服务器端package com.hyf.demo.netty;import io.netty.bootstrap.ServerBootstrap;import io.netty.buffer.ByteBuf;import io.netty.channel.*;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.channel.socket.nio.NioSocketChannel;import io.netty.handler.codec.string.StringDecoder;import io.netty.handler.logging.LogLevel;import io.netty.handler.logging.LoggingHandler;import lombok.extern.slf4j.Slf4j;import java.nio.charset.Charset;@Slf4jpublic class NettyServerDemo { public static void main(String[] args) throws InterruptedException { // 可以给某个handler指定特定的NioEventLoopGroup EventLoopGroup defaultEventLoopGroup = new DefaultEventLoopGroup(); // 线程数默认是这么多 private static final int DEFAULT_EVENT_LOOP_THREADS = Math.max(1, SystemPropertyUtil.getInt(&quot;io.netty.eventLoopThreads&quot;, NettyRuntime.availableProcessors() * 2)); ChannelFuture channelFuture = new ServerBootstrap() // 一个只处理accept 事件 一个处理其他事件 accept事件的NioEventLoopGroup不管设置几，其实到最后都是1 .group(new NioEventLoopGroup(2), new NioEventLoopGroup(2)) .channel(NioServerSocketChannel.class) // 这里添加的处理器都是给SocketChannel的 而不是给ServerSocketChannel的 .childHandler(new ChannelInitializer&lt;NioSocketChannel&gt;() { @Override protected void initChannel(NioSocketChannel nioSocketChannel) throws Exception { // 加个日志 nioSocketChannel.pipeline().addLast(new LoggingHandler()); // 拿到pipeline 设置解码器// nioSocketChannel.pipeline().addLast(new StringDecoder()); // 这里为什么用ChannelInboundHandlerAdapter 而不是ChannelInboundHandler // 是因为使用了适配器模式，可以指定哪些方法我可以实现，而不是强制实现 // 这里如果方法要向下传递 其实可以使用ChannelInboundHandlerAdapter 如果要直接释放 可以使用SimpleChannelInboundHandler nioSocketChannel.pipeline().addLast(&quot;handler1&quot;, new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { ByteBuf buf = (ByteBuf) msg; log.info(buf.toString(Charset.defaultCharset())); // 会向下一个handler传递数据 // 现在使用的ChannelInboundHandlerAdapter 所以需要调用这一句 如果是SimpleChannelInboundHandler就不需要了 ctx.fireChannelRead(msg); } }).addLast(defaultEventLoopGroup, &quot;handler2&quot;, new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext channelHandlerContext, Object msg) throws Exception { ByteBuf buf = (ByteBuf) msg; // 这里打出的线程和handler1 打出来的不一样 log.info(buf.toString(Charset.defaultCharset())); } }); } // 绑定服务端端口 }).bind(9999); // 能在关闭后做一些处理 channelFuture.channel().closeFuture().sync(); // 确保是在连接关闭做的处理 log.info(&quot;close do something...&quot;); // 优雅关闭一些eventLoopGroup中的线程 defaultEventLoopGroup.shutdownGracefully(); }}// client package com.hyf.demo.netty;import io.netty.bootstrap.Bootstrap;import io.netty.channel.Channel;import io.netty.channel.ChannelFuture;import io.netty.channel.ChannelInitializer;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.nio.NioSocketChannel;import io.netty.handler.codec.string.StringEncoder;import io.netty.handler.logging.LoggingHandler;import lombok.extern.slf4j.Slf4j;@Slf4jpublic class NettyClientDemo { public static void main(String[] args) throws InterruptedException { NioEventLoopGroup eventExecutors = new NioEventLoopGroup(2); ChannelFuture channelFuture = new Bootstrap().group(eventExecutors) .channel(NioSocketChannel.class) .handler(new ChannelInitializer&lt;Channel&gt;() { @Override protected void initChannel(Channel channel) throws Exception { channel.pipeline().addLast(new LoggingHandler()); channel.pipeline().addLast(new StringEncoder()); } } ) // 异步非阻塞 .connect(&quot;localhost&quot;, 9999) // 由于netty中都是异步的 所以要sync等待 .sync() // 获取抽象过后的channel通道 .channel() // 写入消息并清空缓冲区 .writeAndFlush(&quot;hello&quot;); // 能在关闭后做一些处理 channelFuture.channel().closeFuture().sync(); // 确保是在连接关闭做的处理 log.info(&quot;close do something...&quot;); // 优雅关闭一些eventLoopGroup中的线程 eventExecutors.shutdownGracefully(); }} 上面这个例子是一个最简单的服务器、客户端编程模版代码，一般来说，我们的代码也就是根据这个模版来扩展了，他的具体流程如下 代码流程图 以上流程说明了以下几点 netty是异步的，可以分配workGroup 线程池 和 boosGroup线程池，启动是通过BootStrap来启动的 NioEventLoopGroup 提供了next接口，可以按照负载均衡策略来指定哪个NioEventLoop来工作 因为实现了ScheduledExecutorService 所以可以执行定时任务、普通任务 以及Io事件的处理 但是DefaultEventLoopGroup处理不了IO事件 把 channel 理解为数据的通道 把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 的加工，会变成其它类型对象，最后输出又变成 ByteBuf 把 handler 理解为数据的处理工序 工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成…）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法） handler 分 Inbound 和 Outbound 两类 把 eventLoop 理解为处理数据的工人 工人可以管理多个 channel 的 io 操作，并且一旦工人负责了某个 channel，就要负责到底（绑定） 工人既可以执行 io 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务 工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人 ByteBuf ByteBuf是netty在nio ByteBuffer上做的增强 针对于ByteBuf 有以下几点需要注意 ByteBuf可以开辟直接内存 也可以开辟堆内存 直接内存需要手动管理释放 ByteBuf具备池化和非池化能力 池化提高工作效率，但是复杂度变高 可以使用slice切片 来模拟半包现象 他有很多和零拷贝相关的类，比如copy\\duplicate\\slice等 粘包半包现象原因粘包半包出现的原因有以下几点 应用层有接收和发送缓冲区限制 传输层有滑动窗口机制 网络层有MTU MCC限制 粘包半包解决方案在netty中有以下几种解决方案 短连接 每次发送完数据就断开连接 可以解决粘包问题 解决不了半包问题 netty提供的定长解码器 ，可以解决问题 但是浪费空间 分隔符解码器 ，可以解决问题 但是效率低 需要找到分隔符 帧解码器:LengthFieldBasedFrameDecoder 这个解码器提供的参数解释如下 maxFrameLength 超过这个长度了还没完 就报错 lengthFieldOffset 长度字段偏移量（就是代表实际内容有多长的的长度字段是从第几个字节开始的） lengthFieldLength 用来记录内容长度的字段的实际字节是多少 lengthAdjustment 长度字段为基准 还有几个字段是内容 initialBytesToStrip 从头剥离几个字节（相当于在最终的结果是没有剥离的那几个字节的） 自定义http协议的一个例子 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152 NioEventLoopGroup boss = new NioEventLoopGroup();NioEventLoopGroup worker = new NioEventLoopGroup();try { ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.channel(NioServerSocketChannel.class); serverBootstrap.group(boss, worker); serverBootstrap.childHandler(new ChannelInitializer&lt;SocketChannel&gt;() { @Override protected void initChannel(SocketChannel ch) throws Exception { ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG)); ch.pipeline().addLast(new HttpServerCodec()); ch.pipeline().addLast(new SimpleChannelInboundHandler&lt;HttpRequest&gt;() { @Override protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception { // 获取请求 log.debug(msg.uri()); // 返回响应 DefaultFullHttpResponse response = new DefaultFullHttpResponse(msg.protocolVersion(), HttpResponseStatus.OK); byte[] bytes = &quot;&lt;h1&gt;Hello, world!&lt;/h1&gt;&quot;.getBytes(); response.headers().setInt(CONTENT_LENGTH, bytes.length); response.content().writeBytes(bytes); // 写回响应 ctx.writeAndFlush(response); } }); /*ch.pipeline().addLast(new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { log.debug(&quot;{}&quot;, msg.getClass()); if (msg instanceof HttpRequest) { // 请求行，请求头 } else if (msg instanceof HttpContent) { //请求体 } } });*/ } }); ChannelFuture channelFuture = serverBootstrap.bind(8080).sync(); channelFuture.channel().closeFuture().sync();} catch (InterruptedException e) { log.error(&quot;server error&quot;, e);} finally { boss.shutdownGracefully(); worker.shutdownGracefully();} 运行后访问浏览器 lcoalhost:8080 浏览器打出hello word 自定义协议的例子自定义协议需要满足以下要求 魔数，用来在第一时间判定是否是无效数据包 版本号，可以支持协议的升级 序列化算法，消息正文到底采用哪种序列化反序列化方式，可以由此扩展，例如：json、protobuf、hessian、jdk 指令类型，是登录、注册、单聊、群聊… 跟业务相关 请求序号，为了双工通信，提供异步能力 正文长度 消息正文 一个🌰 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138package com.hyf.demo.netty;import io.netty.buffer.ByteBuf;import io.netty.buffer.ByteBufAllocator;import io.netty.channel.ChannelHandlerContext;import io.netty.handler.codec.ByteToMessageCodec;import io.netty.handler.codec.MessageToMessageCodec;import lombok.extern.slf4j.Slf4j;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.util.List;@Slf4jpublic class MessageCodecSharable extends MessageToMessageCodec&lt;ByteBuf, Message&gt; { @Override protected void encode(ChannelHandlerContext ctx, Message msg, List&lt;Object&gt; outList) throws Exception { // 将msg内容 写入netty帮助我们创建的Bytebuf中// ByteBuf out = ctx.alloc().buffer(); ByteBuf out = ByteBufAllocator.DEFAULT.buffer(1024); // 1. 4 字节的魔数 out.writeBytes(new byte[]{1, 2, 3, 4}); // 2. 1 字节的版本, out.writeByte(1); // 3. 1 字节的序列化方式 jdk 0 , json 1 out.writeByte(0); // 4. 1 字节的指令类型 out.writeByte(msg.getMessageType()); // 5. 4 个字节 out.writeInt(msg.getSequenceId()); // 无意义，对齐填充 out.writeByte(0xff); // 6. 获取内容的字节数组 ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(msg); byte[] bytes = bos.toByteArray(); // 7. 长度 out.writeInt(bytes.length); // 8. 写入内容 out.writeBytes(bytes); outList.add(out); } @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) throws Exception { int magicNum = in.readInt(); byte version = in.readByte(); byte serializerType = in.readByte(); byte messageType = in.readByte(); int sequenceId = in.readInt(); in.readByte(); int length = in.readInt(); byte[] bytes = new byte[length]; in.readBytes(bytes, 0, length); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes)); Message message = (Message) ois.readObject(); log.debug(&quot;{}, {}, {}, {}, {}, {}&quot;, magicNum, version, serializerType, messageType, sequenceId, length); log.debug(&quot;{}&quot;, message); // 为了给下一个handler使用 out.add(message); }}// 测试类package com.hyf.demo.netty;import com.fasterxml.jackson.databind.ObjectMapper;import io.netty.buffer.ByteBuf;import io.netty.buffer.ByteBufAllocator;import io.netty.buffer.Unpooled;import io.netty.channel.embedded.EmbeddedChannel;import io.netty.handler.logging.LoggingHandler;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.util.ArrayList;import java.util.List;public class Test { public static void main(String[] args) throws Exception { EmbeddedChannel channel = new EmbeddedChannel( new LoggingHandler(),// new LengthFieldBasedFrameDecoder(// 1024, 12, 4, 0, 0), new MessageCodecSharable() );// encode// Message message = new Message(&quot;zhangsan&quot;, &quot;123&quot;); Message message = new Message(1, 2);// channel.writeOutbound(message);// decode ByteBuf buf = ByteBufAllocator.DEFAULT.buffer(); List&lt;Object&gt; messageList = new ArrayList&lt;&gt;(); new MessageCodecSharable().encode(null, message, messageList);// System.out.println(messageList); channel.writeInbound(convertListToByteBuf(messageList));// ByteBuf s1 = buf.slice(0, 100);// ByteBuf s2 = buf.slice(100, buf.readableBytes() - 100);// s1.retain(); // 引用计数 2// channel.writeInbound(s1); // release 1// channel.writeInbound(s2); } public static ByteBuf convertListToByteBuf(List&lt;Object&gt; list) { // 创建一个新的ByteBuf ByteBuf byteBuf = Unpooled.buffer(); // 创建一个字节数组输出流 ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); try { // 创建ObjectMapper对象 ObjectMapper objectMapper = new ObjectMapper(); // 将列表转换为字节数组 byte[] byteArray = objectMapper.writeValueAsBytes(list); // 将字节数组输出流的内容写入ByteBuf byteBuf.writeBytes(byteArrayOutputStream.toByteArray()); byteBuf.writeBytes(byteArray); } catch (IOException e) { e.printStackTrace(); } return byteBuf; }}","link":"/2023/06/13/netty/"},{"title":"NIO","text":"上一篇说过了基础IO流的操作，这篇简单说一下网络编程，网络编程就我自己理解就是在网络世界中进行数据的互相传递，它基于OSI七层模型，进行层层封装，来将数据最终封装成了一个个数据包，然后发往另外一端，这篇暂时不说TCP、UDP以及socket通信的其它协议，这篇只说一下跟IO相关的网络编程 直接上栗子最简单的IO一个简单的基于IO的网络编程🌰 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980// Serverpackage com.hyf.demo.bio;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.net.InetSocketAddress;import java.net.ServerSocket;import java.net.Socket;import java.net.SocketAddress;public class Server { public static void main(String[] args) { // 创建连接 try { ServerSocket serverSocket = new ServerSocket(); SocketAddress socketAddress = new InetSocketAddress(&quot;localhost&quot;, 9999); serverSocket.bind(socketAddress); System.out.println(&quot;等待客户端连接&quot;); // 1.这里会等待客户端连接阻塞 Socket socket = serverSocket.accept(); System.out.println(&quot;客户端连接成功&quot;); // 读取socket输入流中的数据 BufferedReader inputStream = new BufferedReader(new InputStreamReader(socket.getInputStream())); String msg; // 2. 这里会阻塞等待客户端消息 while ((msg = inputStream.readLine()) != null) { System.out.println(msg); } } catch (IOException e) { e.printStackTrace(); } }}// Clientpackage com.hyf.demo.bio;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStream;import java.net.InetSocketAddress;import java.net.Socket;import java.net.SocketAddress;public class Client { public static void main(String[] args) { // 创建socket Socket socket = new Socket(); SocketAddress socketAddress = new InetSocketAddress(&quot;localhost&quot;, 9999); try { socket.connect(socketAddress); System.out.println(&quot;连接服务端成功&quot;); BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in)); String msg; // 这里会等待控制台输入 阻塞 while ((msg = bufferedReader.readLine()) != null) { OutputStream outputStream = socket.getOutputStream(); // 使用了readline 需要加入\\n \\r等 不然不算一行 outputStream.write((msg+&quot;\\n&quot;).getBytes()); outputStream.flush(); } } catch (IOException e) { e.printStackTrace(); } }} 存在的问题上面的代码运行起来后，可以在控制台进行基本的简单的客户端和服务端的通讯，但是上面的代码有几个问题 只能接受一个客户端连接 服务端等待客户端连接只能阻塞等待 解决只能接受一个客户端连接 解决只能接受一个客户端连接 直接上代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135Serverpackage com.hyf.demo.bio;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.net.InetSocketAddress;import java.net.ServerSocket;import java.net.Socket;import java.net.SocketAddress;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.concurrent.LinkedBlockingDeque;import java.util.concurrent.ThreadFactory;import java.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;public class Server { public static void main(String[] args) { // 存储socket的list 这里涉及到多线程编程 所以可以使用带锁的list 但是这里demo的话 自己使用synchronized代码去写 // 这里可以使用CopyOnWriteArrayList 但是CopyOnWriteArrayList 迭代删除的时候会有问题 // 所以可以使用Collections.synchronizedList(new ArrayList&lt;&gt;()); List&lt;Socket&gt; socketList = new ArrayList&lt;&gt;(); ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(5, 10, 60L, TimeUnit.SECONDS, new LinkedBlockingDeque&lt;&gt;(5), new ThreadFactory() { @Override public Thread newThread(Runnable r) { Thread thread = new Thread(r); return thread; } }, new ThreadPoolExecutor.DiscardOldestPolicy()); // 创建连接 try { ServerSocket serverSocket = new ServerSocket(); SocketAddress socketAddress = new InetSocketAddress(&quot;localhost&quot;, 9999); serverSocket.bind(socketAddress); System.out.println(&quot;等待客户端连接&quot;); // 开启一个线程专门处理客户端连接 new Thread(() -&gt; { while (true) { try { Socket socket = serverSocket.accept(); socketList.add(socket); System.out.println(&quot;新加入一个客户端，端口 &quot; + socket.getPort()); TimeUnit.MILLISECONDS.sleep(200); } catch (InterruptedException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } }).start(); // 1.这里会等待客户端连接阻塞 while (true) { synchronized (Server.class) { // 遍历socketList Iterator&lt;Socket&gt; iterator = socketList.iterator(); while (iterator.hasNext()) { Socket socket = iterator.next(); iterator.remove(); // 读取socket输入流中的数据 // 2. 这里会阻塞等待客户端消息 threadPoolExecutor.execute(() -&gt; { try { BufferedReader inputStream = new BufferedReader(new InputStreamReader(socket.getInputStream())); String msg; while (true) { if (((msg = inputStream.readLine()) != null)) { System.out.println(Thread.currentThread().getName() + &quot; 端口 &quot; + socket.getPort() + &quot; &quot; + msg); } } } catch (IOException e) { e.printStackTrace(); } }); } } } } catch (IOException e) { e.printStackTrace(); } }}// Clientpackage com.hyf.demo.bio;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStream;import java.net.InetSocketAddress;import java.net.Socket;import java.net.SocketAddress;public class Client { public static void main(String[] args) { // 创建socket Socket socket = new Socket(); SocketAddress socketAddress = new InetSocketAddress(&quot;localhost&quot;, 9999); try { socket.connect(socketAddress); System.out.println(&quot;连接服务端成功&quot;); BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in)); String msg; // 这里会等待控制台输入 阻塞 while ((msg = bufferedReader.readLine()) != null) { OutputStream outputStream = socket.getOutputStream(); // 使用了readline 需要加入\\n \\r等 不然不算一行 outputStream.write((msg+&quot;\\n&quot;).getBytes()); outputStream.flush(); } } catch (IOException e) { e.printStackTrace(); } }} server输出如下 12345等待客户端连接新加入一个客户端，端口 54968新加入一个客户端，端口 54972Thread-1 端口 54968 我是客户端1Thread-2 端口 54972 我是客户端2 client输出如下 12连接服务端成功我是客户端1 解决第二个问题 服务端只能阻塞等待 这个问题因为我们使用的是BIO，所以只能阻塞等待，靠开多个线程去进行异步处理，但是这样也只能应对连接数比较少的情景，如果连接数一旦上来，那么一直开线程也是一笔很大的开销，所以才有了NIO这样的的非阻塞IO来解决这个问题 NIONIO和 IO的区别 阻塞的 IO 会阻塞在 IO 操作上, NIO 阻塞在事件获取上 NIO解决的问题 工作在非阻塞线程上，线程利用率提高 适合连接数特别多的场景，但是流量较少 常用代码介绍常用的一个bytebuffer代码简单介绍 123456789101112131415161718192021222324252627@Slf4jpublic class ChannelDemo1 { public static void main(String[] args) { try (RandomAccessFile file = new RandomAccessFile(&quot;data.txt&quot;, &quot;rw&quot;)) { FileChannel channel = file.getChannel(); ByteBuffer buffer = ByteBuffer.allocate(10); do { // 向 buffer 写入 int len = channel.read(buffer); log.debug(&quot;读到字节数：{}&quot;, len); if (len == -1) { break; } // 切换 buffer 读模式 buffer.flip(); while(buffer.hasRemaining()) { log.debug(&quot;{}&quot;, (char)buffer.get()); } // 切换 buffer 写模式 // 还有一种 compact模式 是把未读的部分压缩到前边 然后切换到写模式 buffer.clear(); } while (true); } catch (IOException e) { e.printStackTrace(); } }} 阻塞和非阻塞 nio代码例子阻塞和非阻塞nio基础服务端代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.hyf.demo.nio;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.ByteBuffer;import java.nio.channels.ServerSocketChannel;import java.nio.channels.SocketChannel;import java.util.ArrayList;import java.util.List;import static com.hyf.demo.nio.ByteBufferUtil.debugAll;public class NioSocketChannel { public static void main(String[] args) { ByteBuffer byteBuffer = ByteBuffer.allocate(64); try { ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); // 设置为非阻塞 serverSocketChannel.configureBlocking(false); serverSocketChannel.bind(new InetSocketAddress(9999)); List&lt;SocketChannel&gt; channelsList = new ArrayList&lt;&gt;(); while (true) { // 如果是阻塞模式 这里会阻塞 SocketChannel accept = serverSocketChannel.accept(); if (accept != null) { // 设置为非阻塞 accept.configureBlocking(false); channelsList.add(accept); } for (SocketChannel socketChannel : channelsList) { // 如果是阻塞模式 这里也会阻塞 int read = socketChannel.read(byteBuffer); if (read &gt; 0) { byteBuffer.flip(); debugAll(byteBuffer); byteBuffer.clear(); } } } } catch (IOException e) { e.printStackTrace(); } }} 上面的代码的好处是 设置为非阻塞后，我们的客户端连接就不会阻塞，读取也不会阻塞了，但是这样有个问题就是，会消耗大量cpu（cpu空转、利用率太高），所以我们要使用selector模式，使用selector来管理channel，使用一个线程来管理selector selecor 的四种事件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175/** * Operation-set bit for read operations. * * &lt;p&gt; Suppose that a selection key's interest set contains * &lt;tt&gt;OP_READ&lt;/tt&gt; at the start of a &lt;a * href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;. If the selector * detects that the corresponding channel is ready for reading, has reached * end-of-stream, has been remotely shut down for further reading, or has * an error pending, then it will add &lt;tt&gt;OP_READ&lt;/tt&gt; to the key's * ready-operation set and add the key to its selected-key&amp;nbsp;set. &lt;/p&gt; */ public static final int OP_READ = 1 &lt;&lt; 0; /** * Operation-set bit for write operations. * * &lt;p&gt; Suppose that a selection key's interest set contains * &lt;tt&gt;OP_WRITE&lt;/tt&gt; at the start of a &lt;a * href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;. If the selector * detects that the corresponding channel is ready for writing, has been * remotely shut down for further writing, or has an error pending, then it * will add &lt;tt&gt;OP_WRITE&lt;/tt&gt; to the key's ready set and add the key to its * selected-key&amp;nbsp;set. &lt;/p&gt; */ public static final int OP_WRITE = 1 &lt;&lt; 2; /** * Operation-set bit for socket-connect operations. * * &lt;p&gt; Suppose that a selection key's interest set contains * &lt;tt&gt;OP_CONNECT&lt;/tt&gt; at the start of a &lt;a * href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;. If the selector * detects that the corresponding socket channel is ready to complete its * connection sequence, or has an error pending, then it will add * &lt;tt&gt;OP_CONNECT&lt;/tt&gt; to the key's ready set and add the key to its * selected-key&amp;nbsp;set. &lt;/p&gt; */ public static final int OP_CONNECT = 1 &lt;&lt; 3; /** * Operation-set bit for socket-accept operations. * * &lt;p&gt; Suppose that a selection key's interest set contains * &lt;tt&gt;OP_ACCEPT&lt;/tt&gt; at the start of a &lt;a * href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;. If the selector * detects that the corresponding server-socket channel is ready to accept * another connection, or has an error pending, then it will add * &lt;tt&gt;OP_ACCEPT&lt;/tt&gt; to the key's ready set and add the key to its * selected-key&amp;nbsp;set. &lt;/p&gt; */ public static final int OP_ACCEPT = 1 &lt;&lt; 4;``` ### 使用selector 处理nio消息下面的这个例子是使用selector处理 nio消息的```javapackage com.hyf.demo.nio;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.ByteBuffer;import java.nio.CharBuffer;import java.nio.channels.SelectionKey;import java.nio.channels.Selector;import java.nio.channels.ServerSocketChannel;import java.nio.channels.SocketChannel;import java.nio.charset.CharacterCodingException;import java.nio.charset.Charset;import java.nio.charset.CharsetDecoder;import java.util.Iterator;import java.util.Set;import static com.hyf.demo.nio.ByteBufferUtil.debugAll;public class NioSelectorSocketChannel { public static void main(String[] args) { try { // 建立selector Selector selector = Selector.open(); ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.configureBlocking(false); // 绑定serverSocketChannel SelectionKey selectionKey = serverSocketChannel.register(selector, 0, null); // 设置感兴趣的事件 selectionKey.interestOps(SelectionKey.OP_ACCEPT); // 设置为非阻塞 serverSocketChannel.bind(new InetSocketAddress(9999)); while (true) { // 阻塞 监听事件的发生 如果事件处理了 select会阻塞 如果没处理 则不阻塞 如果不想处理，那就取消事件cancel() selector.select(); Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys(); Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); if (key.isAcceptable()) { ServerSocketChannel channel = (ServerSocketChannel) key.channel(); SocketChannel socketChannel = channel.accept(); // selector都是必须工作在 非阻塞模式 socketChannel.configureBlocking(false); // 注册 到selector上 因为一个selector可以管理多个chanel SelectionKey scKey = socketChannel.register(selector, 0, ByteBuffer.allocate(16)); scKey.interestOps(SelectionKey.OP_READ); } else if (key.isReadable()) { SocketChannel channel = (SocketChannel) key.channel(); ByteBuffer byteBuffer = (ByteBuffer) key.attachment(); int read = channel.read(byteBuffer); // 客户端正常断开 返回-1 if (read == -1) { key.cancel(); channel.close(); } else { // 处理粘包 split(byteBuffer); // 处理扩容 if (byteBuffer.position() == byteBuffer.limit()) { ByteBuffer newBytebuffer = ByteBuffer.allocate(2 * byteBuffer.capacity()); byteBuffer.flip(); newBytebuffer.put(byteBuffer); key.attach(newBytebuffer); }// byteBuffer.flip();// debugRead(byteBuffer); } } // 需要手动删除 不然事件虽然处理了 绑定事件的key还存在 iterator.remove(); } } } catch (IOException e) { e.printStackTrace(); } } private static void split(ByteBuffer byteBuffer) { byteBuffer.flip(); for (int i = 0; i &lt; byteBuffer.limit(); i++) { if (byteBuffer.get(i) == '\\n') { int length = i + 1 - byteBuffer.position(); ByteBuffer target = ByteBuffer.allocate(length); for (int j = 0; j &lt; length; j++) { target.put(byteBuffer.get()); } // 将 position 设置为 0，准备开始读取 target.flip(); // 或者将字节转换为字符串并一次性输出 String output = new String(target.array(), target.position(), target.remaining()); System.out.println(output); } } byteBuffer.compact(); }} 上面是服务段代码 客户端代码如下 1234567891011121314151617181920212223package com.hyf.demo.nio;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.channels.SocketChannel;import java.nio.charset.Charset;public class NioSelectorClient { public static void main(String[] args) { SocketChannel socketChannel = null; try { socketChannel = SocketChannel.open(); socketChannel.connect(new InetSocketAddress(9999)); socketChannel.write(Charset.defaultCharset().encode(&quot;huyunfeinihaocongjianihaok\\noolopwew\\n&quot;)); System.in.read(); } catch (IOException e) { e.printStackTrace(); } }} nio编程解决的问题 上面的例子简单解决的以下几个问题 粘包黏包问题（TCP编程必须考虑的问题） 客户端异常中断或者正常退出处理 bytebuffer 扩容 （上面只是简单的扩容，但是得考虑bytebuffer的扩容和缩容，做成动态的更好，netty就做的比较好） 但是如果我们往客户端发送内容，需要注意哪些问题呢 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182package com.hyf.demo.nio;import lombok.extern.slf4j.Slf4j;import java.io.IOException;import java.net.InetSocketAddress;import java.net.SocketAddress;import java.nio.ByteBuffer;import java.nio.channels.*;import java.nio.charset.Charset;import java.util.Iterator;@Slf4jpublic class NioWrite { public static void main(String[] args) { try { ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); SocketAddress socketAddress = new InetSocketAddress(9000); serverSocketChannel.bind(socketAddress); serverSocketChannel.configureBlocking(false); Selector selector = Selector.open(); SelectionKey selectionKey = serverSocketChannel.register(selector, 0, null); selectionKey.interestOps(SelectionKey.OP_ACCEPT); while (true) { selector.select(); Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); iterator.remove();; if (key.isAcceptable()) { ServerSocketChannel ssc = (ServerSocketChannel) key.channel(); SocketChannel socketChannel = ssc.accept(); socketChannel.configureBlocking(false); SelectionKey sckey = socketChannel.register(selector, 0, SelectionKey.OP_READ); StringBuffer stringBuffer = new StringBuffer(); for (int i = 0; i &lt; 3000000; i++) { stringBuffer.append(&quot;a&quot;); } ByteBuffer byteBuffer = Charset.defaultCharset().encode(stringBuffer.toString()); int write = socketChannel.write(byteBuffer); log.info(&quot;实际写入了 {}&quot;, write); if (byteBuffer.hasRemaining()) { sckey.interestOps(SelectionKey.OP_WRITE + sckey.interestOps()); sckey.attach(byteBuffer); } } else if (key.isWritable()) { log.info(&quot;write able...&quot;); ByteBuffer byteBuffer = (ByteBuffer) key.attachment(); SocketChannel channel = (SocketChannel)key.channel(); int write = channel.write(byteBuffer); if(!byteBuffer.hasRemaining()){ log.info(&quot;cancel wrible&quot;); key.interestOps(key.interestOps()-SelectionKey.OP_WRITE); key.attach(null); } log.info(&quot;实际写入了 {}&quot;, write); } } } } catch (IOException e) { e.printStackTrace(); } }} 对应的客户端例子如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.hyf.demo.nio;import java.io.IOException;import java.net.InetSocketAddress;import java.net.SocketAddress;import java.nio.ByteBuffer;import java.nio.channels.SelectionKey;import java.nio.channels.Selector;import java.nio.channels.SocketChannel;import java.util.Iterator;public class NioReadClient { public static void main(String[] args) throws IOException { SocketChannel socketChannel = SocketChannel.open(); SocketAddress socketAddress = new InetSocketAddress(9000); socketChannel.connect(socketAddress); int count = 0; while (true){ ByteBuffer byteBuffer = ByteBuffer.allocate(1024); int read = socketChannel.read(byteBuffer); count += read; System.out.println(count); byteBuffer.clear(); }// Selector selector = Selector.open();// socketChannel.configureBlocking(false);// socketChannel.register(selector, SelectionKey.OP_CONNECT + SelectionKey.OP_READ);// int count = 0;// while (true) {// selector.select();//// Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();//// while (iterator.hasNext()){// SelectionKey sk = iterator.next();// iterator.remove();//// if(sk.isConnectable()){// System.out.println(&quot;connect...&quot;);// }// else if(sk.isReadable()){// ByteBuffer byteBuffer = ByteBuffer.allocate(1024);//// int read = socketChannel.read(byteBuffer);// count += read;// System.out.println(count);// byteBuffer.clear();// }// }//// } }} 多线程优化nio代码以上我们展示了nio的读取、写入 以及遇到的问题，但是思考一个问题，我们要实现的是一个高性能的服务器，那么如果有大量连接请求进来，在处理read事件的时候要很久，那单线程是不是就无能为力了，所以我们要将上面的代码优化成多线程的方式，就是一个线程负责建立连接、另外一些线程专门负责读写，代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143package com.hyf.demo.nio;import lombok.SneakyThrows;import lombok.extern.slf4j.Slf4j;import java.io.IOException;import java.net.InetSocketAddress;import java.net.SocketAddress;import java.nio.ByteBuffer;import java.nio.CharBuffer;import java.nio.channels.*;import java.nio.charset.Charset;import java.util.Iterator;import java.util.concurrent.ConcurrentLinkedDeque;import java.util.concurrent.TimeUnit;@Slf4jpublic class NioThreadWork { public static void main(String[] args) { Thread.currentThread().setName(&quot;boss&quot;); try { // 创建一个serverSocketChannel ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); // 绑定一个端口 SocketAddress socketAddress = new InetSocketAddress(9999); serverSocketChannel.bind(socketAddress); // 设置为false serverSocketChannel.configureBlocking(false); // 打开一个selector Selector selector = Selector.open(); // 注册chanel 到 selector上 SelectionKey boosKey = serverSocketChannel.register(selector, 0, null); // 注册感兴趣的事件 boosKey.interestOps(SelectionKey.OP_ACCEPT); Worker worker = new Worker(&quot;work&quot;); while (true) { log.info(&quot;等待连接中&quot;); selector.select(); Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); iterator.remove(); if (key.isAcceptable()) { log.info(&quot;连接事件建立&quot;); ServerSocketChannel ssc = (ServerSocketChannel) key.channel(); SocketChannel socketChannel = ssc.accept(); socketChannel.configureBlocking(false); log.info(&quot;注册读取事件 before&quot;); worker.register(socketChannel); log.info(&quot;注册读取事件 after&quot;); } } } } catch (IOException e) { e.printStackTrace(); } } public static class Worker implements Runnable { private String name; private Thread thread; private volatile Selector selector; private volatile boolean start = false; private ConcurrentLinkedDeque&lt;Runnable&gt; linkedDeque = new ConcurrentLinkedDeque&lt;&gt;(); public Worker(String name) { this.name = name; } public void register(SocketChannel socketChannel) throws IOException { if (!start) { thread = new Thread(this, name); thread.start(); selector = Selector.open(); start = true; } linkedDeque.offer(() -&gt; { try { socketChannel.register(selector, SelectionKey.OP_READ); } catch (ClosedChannelException e) { e.printStackTrace(); } }); selector.wakeup(); } @SneakyThrows @Override public void run() { while (true) { Runnable poll = linkedDeque.poll(); if (poll != null) { poll.run(); } log.info(&quot;读取事件阻塞&quot;); selector.select(); Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); iterator.remove(); if (key.isReadable()) { log.info(&quot;读数据开始&quot;); SocketChannel channel = (SocketChannel) key.channel(); ByteBuffer byteBuffer = ByteBuffer.allocate(1024); channel.read(byteBuffer); byteBuffer.flip(); CharBuffer decode = Charset.defaultCharset().decode(byteBuffer); while (decode.hasRemaining()) { log.info(&quot;content {}&quot;, decode.get()); } } } } } }} 客户端代码如下 12345678910111213141516171819202122232425262728package com.hyf.demo.nio;import java.io.IOException;import java.net.InetSocketAddress;import java.net.SocketAddress;import java.nio.channels.SocketChannel;import java.nio.charset.Charset;public class NioThreadClient { public static void main(String[] args) { try { SocketChannel socketChannel =SocketChannel.open(); SocketAddress socketAddress = new InetSocketAddress(9999); socketChannel.connect(socketAddress); socketChannel.write(Charset.defaultCharset().encode(&quot;你好&quot;)); System.in.read(); } catch (IOException e) { e.printStackTrace(); } }} 以上代码便实现了一个简易的多线程版本的读写服务端和客户端，如果再完善的话，可以加上我们之前的各种优化点，对bytebuffer的扩容、对粘包的处理，对客户端异常关闭正常关闭的处理等 会让代码更加完善，但是我们自己处理还是会有很多问题，比如nio有很多代码其实是一样的，而且还有一个臭名昭著的空轮训导致cpu打满的问题，所以有必要封装一套高性能的网络框架来处理这些问题，也就是大名鼎鼎的netty 所以下一篇,我就来简单介绍下netty的使用以及原理","link":"/2023/05/08/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"title":"IO 流","text":"IO是网络世界中不可获缺的并且很重要的一部分，它是input|output的缩写，有了它，我们才能在网络中传输数据，包括输入和输出 分类 输入流：主要有InputStream 和 Reader这两个字节和字符流 输出流：主要有OutputStream 和 Writer这两个字节和字符流 字节流：可以操作任何数据 字符流：转么用来操作字符的，比较方便 常用的流流的种类很多，我们只需要知道常用的流，知道他们的原理就好，以后用到其他的再去查阅即可 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// FileInputStream/FileReader // FileOutputStream/FileWriterpackage com.hyf.demo.io;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;public class FileInputStreamTest { public static void main(String[] args) { // 将一个文本写入到一个文件 String txt = &quot;hello java&quot;; File file = new File(&quot;/Users/huyunfei/Downloads/java.txt&quot;); try { FileOutputStream fileInputStream = new FileOutputStream(file, true); fileInputStream.write(txt.getBytes()); } catch (IOException e) { e.printStackTrace(); } // 读取路径中的数据 输出到控制台 FileInputStream fileInputStream = null; try { fileInputStream = new FileInputStream(file); // 1. 这种方式是一个一个字节读取 int msg; while ((msg = fileInputStream.read()) != -1) { System.out.println((char) msg); } // 2. 这种方式是1024个字节读取 byte[] bytes = new byte[1024]; while (fileInputStream.read(bytes) != -1) { System.out.println(new String(bytes)); } } catch (IOException e) { e.printStackTrace(); } finally { try { fileInputStream.close(); } catch (IOException e) { e.printStackTrace(); } } }} 这个是最基础的输入输出,还有专门用于读取字符的流 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.hyf.demo.io;import java.io.*;public class BufferReaderTest { public static void main(String[] args) { // 将一个文本写入到一个文件 String txt = &quot;hello buffer\\n&quot;; File file = new File(&quot;/Users/huyunfei/Downloads/java.txt&quot;); try { BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file)); bufferedOutputStream.write(txt.getBytes()); bufferedOutputStream.flush(); // 字符buffer写入基础代码// BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));// bufferedWriter.write(txt);// bufferedWriter.newLine();// bufferedWriter.flush(); } catch (IOException e) { e.printStackTrace(); } // 读取路径中的数据 输出到控制台 BufferedReader bufferedReader = null; try { bufferedReader = new BufferedReader(new FileReader(file)); // 1. 这种方式是一行一行读取 String msg; while ((msg = bufferedReader.readLine()) != null) { System.out.println(msg); } // 2. 这种方式是1024个字节读取 上面读取完毕后 流里面的数据会清空// char[] bytes = new char[1024];// while (bufferedReader.read(bytes) != -1) {// System.out.println(new String(bytes));// } } catch (IOException e) { e.printStackTrace(); } finally { try { bufferedReader.close(); } catch (IOException e) { e.printStackTrace(); } } }} 上面是按照带buffer的流读取的基础代码 牵扯到的两个问题为什么要出现带缓冲区的流使用带缓冲的流包装基础流涉及到的设计模式 接着我们来解释第一个问题，为什么要使用带缓冲区的流? 一般来说我们进行频繁数据读写的时候，很耗费性能，于是我们需要将需要读写的数据找到一个地方暂存起来，然后进行一个批量的读写，用的也是顺序写，用来缓解不同设备之间频繁的数据读写，于是有了缓冲区的出现 怎么证明使用了buffer 比不使用buffer 速度快呢？ 源码如下 12345678910111213141516171819 public synchronized void write(byte b[], int off, int len) throws IOException { //在这判断需要写的数据长度是否已经超出容器的长度（8192byte）了,如果超出则直接写到相应的outputStream中,并清空缓冲区 if (len &gt;= buf.length) { /* If the request length exceeds the size of the output buffer, flush the output buffer and then write the data directly. In this way buffered streams will cascade harmlessly. */ flushBuffer(); out.write(b, off, len); return; } // 判断缓冲区剩余的容量是否还够写入当前len的内容,如果不够则清空缓冲区 if (len &gt; buf.length - count) { flushBuffer(); } // 将要写的数据先放入内存中,等待数据达到了缓冲区的长度后,再写到相应的outputStream中 System.arraycopy(b, off, buf, count, len); count += len;}// 他不是每次都调用系统的write 而是积攒到8192byte后才调用一次write 大大减少了系统调用 实验如下 123456789101112131415161718192021222324252627282930313233343536373839import java.io.BufferedOutputStream;import java.io.File;import java.io.FileOutputStream;public class OSFileIO { static byte[] data = &quot;123456789\\n&quot;.getBytes(); static String path = &quot;/data/io/out.txt&quot;; public static void main(String[] args) throws Exception { switch (args[0]) { case &quot;0&quot;: testBasicFileIO(); break; case &quot;1&quot;: testBufferedFileIO(); break; default: break; } } public static void testBasicFileIO() throws Exception { File file = new File(path); FileOutputStream out = new FileOutputStream(file); while (true) { out.write(data); } } public static void testBufferedFileIO() throws Exception { File file = new File(path); BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file)); while (true) { out.write(data); } }}// 这段代码来源于网络 将这段代码上传到linux目录 1/Users/huyunfei/Documents/study/testCase/io 然后执行 1234# 编译java文件javac OSFileIO.java# 使用strace 分析这个程序涉及到的系统调用strace -ff -o out java OSFileIO $1 可以发现最终的结果是，不使用buffer的流，系统调用的write很多，而使用了buffer的达到了8192 byte才会进行一个系统write调用，所以很明显使用buffer后速度更快 第二个问题 这里涉及到的设计模式是什么 流中涉及到的设计模式最经典的就是装饰者模式，就是在已有类上进行装饰增强。这样做的优点是可以不改变已有的类，比继承灵活，完全遵循开闭原则；缺点是增加了更多的类，多层装饰增加了代码复杂性 其实还有一些常用的流，比如对象流（可以直接传输对象）、还有我们一般对于文件的读写比较多，但是频繁的文件读写并不好，所以我们可以使用字节数组流，也称为内存流， 对象流1234567891011121314151617181920212223242526272829303132333435363738package com.hyf.demo.io;import java.io.*;public class ObjectIOTest { public static void main(String[] args) { try { // 将一个对象序列化到文件中 Student student = new Student(&quot;libei&quot;, 18); FileOutputStream fileOutputStream = new FileOutputStream(&quot;/Users/huyunfei/Downloads/java.txt&quot;); ObjectOutputStream writeObjectStream = new ObjectOutputStream(fileOutputStream); writeObjectStream.writeObject(student); // 将文件中对象反序列化出来 FileInputStream fileInputStream = new FileInputStream(&quot;/Users/huyunfei/Downloads/java.txt&quot;); ObjectInputStream readObjectStream = new ObjectInputStream(fileInputStream); Student student1 = (Student) readObjectStream.readObject(); System.out.println(student1); } catch (IOException | ClassNotFoundException e) { e.printStackTrace(); } }}// 这里一定要实现序列化接口class Student implements Serializable { private String name; private Integer age; public Student(String name, Integer age) { this.name = name; this.age = age; }} 字节数组流1234567891011121314151617181920212223242526package com.hyf.demo.io;import java.io.*;public class ByteArrayInputStreamTest { public static void main(String[] args) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream); try { dataOutputStream.writeDouble(Math.random()); dataOutputStream.writeBoolean(true); ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray()); DataInputStream dataInputStream = new DataInputStream(byteArrayInputStream); System.out.println(dataInputStream.available()); System.out.println(dataInputStream.readBoolean()); System.out.println(dataInputStream.readDouble()); System.out.println(dataInputStream.available()); } catch (IOException e) { e.printStackTrace(); } }} 常用的流就这些，我们在日常工作用到了查手册就好。 选用哪种流 记得刚才我们分析过了有一个BufferOutoutStream为什么快，那它和这个内存流ByteOutputStream有什么区别呢？ ByteOutputStream 会每次创建一个32个byte的buffer，每次写入的时候会对比剩余容量是否够用，如果不够用就grow这个buffer 继续写入，一直等数据写完，这些数据都是在内存的 12345678910public synchronized void write(byte b[], int off, int len) { if ((off &lt; 0) || (off &gt; b.length) || (len &lt; 0) || ((off + len) - b.length &gt; 0)) { throw new IndexOutOfBoundsException(); } // 确保buffer 足够 ensureCapacity(count + len); System.arraycopy(b, off, buf, count, len); count += len; } 所以如果想要快速写入的话，使用ByteArrayOutputStream,如果资源不太够用的时候，应该选择BufferOutputStream 下一篇说一下各种IO的区别和背景，以及网络IO的演进","link":"/2023/05/05/IO/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/03/27/hello-world/"}],"tags":[{"name":"IO","slug":"IO","link":"/tags/IO/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"网络编程","slug":"网络编程","link":"/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"常用","slug":"常用","link":"/tags/%E5%B8%B8%E7%94%A8/"}],"categories":[{"name":"java","slug":"java","link":"/categories/java/"},{"name":"锁分析","slug":"java/锁分析","link":"/categories/java/%E9%94%81%E5%88%86%E6%9E%90/"},{"name":"IO","slug":"java/IO","link":"/categories/java/IO/"},{"name":"网络编程","slug":"java/网络编程","link":"/categories/java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"常用命令","slug":"常用命令","link":"/categories/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"name":"hello word","slug":"java/hello-word","link":"/categories/java/hello-word/"},{"name":"常用","slug":"常用命令/常用","link":"/categories/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%B8%B8%E7%94%A8/"}],"pages":[{"title":"","text":"个人简介攻城狮，喜欢听歌看电影读文电台，一个人走夜路 分享老罗说过的的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 历史书太小，只会记住那些天才但是感谢互联网，这个时代能够记住每一个做出贡献的人这些贡献记录在github上,记录在无时无刻都在流淌的数据里 来到这里的小伙伴们我们一起加油！ 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。","link":"/about/index.html"},{"title":"","text":"五颜六色的生活啊 free time","link":"/album/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"给我留个言吧 留言板加载中，请稍等... $.getScript(\"https://unpkg.com/gitalk/dist/gitalk.min.js\", function () { var gitalk = new Gitalk({ clientID: 'a1ad219ff90da8100007', clientSecret: '97b9266d67d87e37cdcb328e10460af8295a4e7d', id: '2423', repo: 'hxq94.github.io', owner: 'hxq94', admin: \"hxq94\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"}]}