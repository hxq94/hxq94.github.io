{"pages":[{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"锁分析","text":"synchronized 实现原理 synchronized是jvm层面的一种锁,如果是多个jvm则只能在一个jvm中生效 它能保证有序性、可见、原子性 synchronized可以加在方法上 可以是一个代码块，wait/notify也以来monitor对象 这就是为什么要用在同步中的原因 synchronized 最终锁住的是一个对象的monitor。java是编译成为class文件 jvm拿到这个class文件后可以得到要执行的jvm指令，他会把这些指令根据c++代码解析后翻译成为机器码 交给操作系统去执行。 在jvm底层操作jvm指令的源码发现 其实monitor是有一个数据结构的 比如owner 存放的是目前占有锁的线程 EntryList存放的后续来竞争锁的线程 WaitSet 是存放之前获取过锁，但是在WAEIING状态的线程的 在1.5之前他是直接在操作系统层面加锁，所以比较重，在1.6之后可以通过锁升级机制来让锁的性能提高 大概就是可以从无锁、偏向锁、轻量级锁到最后的重量级锁偏向锁就是存在同步但无竞争的情况 比如spring的源码，它里面有一些方法加了同步 但是基本是没有竞争的 那这样的话每次直接判断一下owner中的线程是不是同一个就可以了假设存在少量的几个竞争 那么就会升级成为轻量级锁，轻量级锁他是使用了cas机制，没有获取到锁不会挂起等待，所以就不涉及到cpu调度、线程切换这些比较重的操作，他会一直空轮训自适应自旋 但是这样会耗费cpu资源，所以一旦判断自旋超过多少次，就会觉得线程竞争很厉害，就转换为重量级锁 CAS cas 是比较和交换的意思 是乐观锁的一种实现 可以解决并发问题 它主要实现原理是这样的 有一个主存中的最终结果值 他是被valitile修饰的 还有每一个线程进来后会有一个拿到的值 以及我们要修改的值比如 两个线程并发了 第一个线程拿到是50 第二个线程拿到的也是50 要修改成60在修改成60的时候会把当前拿到的值跟内存中的结果值比较一下 如果一样，才修改成功那么此时这个场景就是a线程拿到50 进行修改 判断50和内存中的50一致 修改成功 内存中值变为60b线程拿到的也是50 进行修改 判断50和当前内存值60 不一致 修改失败 这样就使用cas解决了并发问题但是cas会有两个问题 : 原子性问题和ABA问题原子性问题：判断和修改是两步操作 看底层是使用的lock实现 所以解决原子性问题ABA问题： 假设有三个线程 a,b,c 并发了a线程要把100变为50 b线程也要把100变为50 c线程要把50变为100假设此时a线程 成功执行了 b线程刚执行完和a拿到100这个步骤，阻塞了；此时c线程执行50变100操作成功，也就在此时b线程恢复了 又把100 变成了50 ；这就出现了问题如果要解决的话 需要加一个版本号 更新的时候把版本号更新+1 且判断条件加上版本判断 LongAdder 和 AtomicIntergerAtomicInterger 实现了cas操作LongAdder 是优化后的cas 原理是把数据分段后作cas++ 会根据来的线程多少动态的扩缩数据分段 最后再做累加 分多少段其实理论上性能就提高多少倍threadLocal也能解决 多个线程操作同一变量的问题 分布式锁 多个jvm的时候使用分布式锁 有多个实现版本 基于mysql的 redis的 zookeeper的 分布式锁使用最基础版本的redis的话 需要注意以下几点（1）在设置key的时候要把value设置为能标识当前线程的值（2）且设置一个过期时间，并且使用的是setnx原子操作（3）释放锁要写到finally里面 释放锁的时候要判断是当前线程持有的锁才释放 避免释放掉其他线程的锁 且这两步要是一个原子操作 使用lua脚本来实现（4）要搞一个守护线程，假设锁内业务逻辑没有执行完 要续过期时间 基于以上问题 redsi帮助我们封装了一个redisson客户端 帮助我们封装了以上操作 但是如果我们使用的是redis集群，那么会有一个问题 主从同步场景的时候 如果刚给master上锁成功 master给slave同步数据的时候挂掉了，那么此时再获取锁的时候，在从节点是获取不到锁的，因为redis的模型是AP,只能保证可用性和分区容错性，保证不了一致性 所以此时应该考虑使用redlock去完成分布式锁的添加，但是网上有redlock的问题，所以做分布式锁还是应该优先考虑zookeeper 如果是在删除锁的时候没有用lua脚本也是会有问题的：比如判断是否是同一线程持有的锁已经通过了 a线程此时开始阻塞 刚好这时候通过过期时间过期了锁，那么线程b拿到锁，此时a线程开始执行 就会把线程b的锁释放掉 为什么要选择zookeeper 因为zookeeper是基于CP模型的数据模型，zab来保证一致性问题，所以会导致zookerper比redis性能低，但是我们的场景又是高并发下的分布式锁问题， 如果对于并发出现的问题不能容忍，那么应该优先选用zookeeper，并且redlock 需要至少5个节点 从效率上说其实也不快了 牵扯到的一个秒杀情况下使用分布式锁的性能问题 其实还是分段思想，将库存分布在不同的锁中，那么性能会提示很多 可以解决缓存和数据库双写不一致的问题（市面上有延时双删、内存队列，优化可以使用读写锁） AQS可重入锁 锁的一个关键就是 有并发 并且有竞争 公平锁判断state为0的时候 不能直接cas获取锁 因为是公平锁，此时可能有很多线程已经在排队了 其它线程入队时候 他要自旋2次，自旋两次的时候会尝试获取锁 比如有三个线程 此时第一个已经释放了，第二个就会拿到锁 且变为thread==null的head节点，但是此时第三个线程来了 在入队过程中他要自旋，那么此时就会判断：来询问能否获取到锁的线程，是不是除去thread==null那个节点的第二个节点 如果不是thread==null的那个节点的线程 肯定不能获取锁 第二个线程来入队的时候会进行自旋 自旋的时候会判断：锁是自由状态 且去竞争的线程是thread==null后面的节点的线程才有资格进行cas获取锁 可重入的时候也会判断持有锁的线程永远不在队列中 return h != t &amp;&amp; ((s = h.next) == null || s.thread != Thread.currentThread()); 第一种：队列没有初始化 h!=t 返回false 返回false 意味着可以尝试cas获取锁第二种：如果队列初始化了，初始化后 分两种情况 1.1: 如果队列中的元素比较多 那么h!t 返回true 返回true 要分为两种情况 1.1.1 如果(s = h.next) == null 返回true 说明有两个元素 后面的 s.thread != Thread.currentThread() 就不判断了 那么肯定要排队 1.1.2 如果(s = h.next) == null 返回false 说明有多个元素 此时 s.thread != Thread.currentThread() 如果返回true 说明不是重入 肯定要排队 如果返回false 说明是重入的 那么可以尝试cas获取锁 1.2: 如果队列中的元素只有一个，说明最后一个线程加锁了 前面的都已经unlock了 此时 h!=t返回的是 false 那么直接去cas竞争锁","link":"/2022/06/04/%E9%94%81%E5%88%86%E6%9E%90/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/03/27/hello-world/"}],"tags":[{"name":"java","slug":"java","link":"/tags/java/"}],"categories":[{"name":"java","slug":"java","link":"/categories/java/"}]}